// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/khanakia/entautoslow/ent/item"
	"github.com/khanakia/entautoslow/ent/predicate"
	"github.com/khanakia/entautoslow/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeItem = "Item"
	TypeUser = "User"
)

// ItemMutation represents an operation that mutates the Item nodes in the graph.
type ItemMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	tx_type_id                 *int64
	addtx_type_id              *int64
	sku                        *string
	title                      *string
	sub_title                  *string
	status_id                  *int64
	addstatus_id               *int64
	no_index                   *bool
	item_category_id           *int64
	additem_category_id        *int64
	base_on_sale_price         *bool
	retail_price               *float64
	addretail_price            *float64
	sale_price                 *float64
	addsale_price              *float64
	shipping_profile_id_num    *int64
	addshipping_profile_id_num *int64
	optimization_id_num        *int64
	addoptimization_id_num     *int64
	qty                        *int64
	addqty                     *int64
	maximum_order_qty          *int64
	addmaximum_order_qty       *int64
	pkg_width                  *float64
	addpkg_width               *float64
	pkg_height                 *float64
	addpkg_height              *float64
	pkg_length                 *float64
	addpkg_length              *float64
	pkg_weight                 *float64
	addpkg_weight              *float64
	short_desc                 *string
	descr                      *string
	image_url1                 *string
	image_url2                 *string
	image_url3                 *string
	image_url4                 *string
	image_url5                 *string
	condition                  *string
	brand                      *string
	gender                     *string
	age_group                  *string
	color                      *string
	size                       *string
	uxm_item_id_num            *int64
	adduxm_item_id_num         *int64
	sent                       *bool
	sent_at                    *time.Time
	has_error                  *bool
	last_log_id                *int64
	addlast_log_id             *int64
	feed_response              *string
	keywords                   *string
	sync                       *bool
	user_id                    *string
	shipping_profile_id        *string
	optimization_id            *string
	uxm_item_id                *string
	parent_id                  *string
	item_type_id               *string
	uid                        *string
	is_parent                  *bool
	clearedFields              map[string]struct{}
	done                       bool
	oldValue                   func(context.Context) (*Item, error)
	predicates                 []predicate.Item
}

var _ ent.Mutation = (*ItemMutation)(nil)

// itemOption allows management of the mutation configuration using functional options.
type itemOption func(*ItemMutation)

// newItemMutation creates new mutation for the Item entity.
func newItemMutation(c config, op Op, opts ...itemOption) *ItemMutation {
	m := &ItemMutation{
		config:        c,
		op:            op,
		typ:           TypeItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withItemID sets the ID field of the mutation.
func withItemID(id int) itemOption {
	return func(m *ItemMutation) {
		var (
			err   error
			once  sync.Once
			value *Item
		)
		m.oldValue = func(ctx context.Context) (*Item, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Item.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withItem sets the old Item of the mutation.
func withItem(node *Item) itemOption {
	return func(m *ItemMutation) {
		m.oldValue = func(context.Context) (*Item, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ItemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ItemMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Item.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTxTypeID sets the "tx_type_id" field.
func (m *ItemMutation) SetTxTypeID(i int64) {
	m.tx_type_id = &i
	m.addtx_type_id = nil
}

// TxTypeID returns the value of the "tx_type_id" field in the mutation.
func (m *ItemMutation) TxTypeID() (r int64, exists bool) {
	v := m.tx_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTxTypeID returns the old "tx_type_id" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldTxTypeID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxTypeID: %w", err)
	}
	return oldValue.TxTypeID, nil
}

// AddTxTypeID adds i to the "tx_type_id" field.
func (m *ItemMutation) AddTxTypeID(i int64) {
	if m.addtx_type_id != nil {
		*m.addtx_type_id += i
	} else {
		m.addtx_type_id = &i
	}
}

// AddedTxTypeID returns the value that was added to the "tx_type_id" field in this mutation.
func (m *ItemMutation) AddedTxTypeID() (r int64, exists bool) {
	v := m.addtx_type_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearTxTypeID clears the value of the "tx_type_id" field.
func (m *ItemMutation) ClearTxTypeID() {
	m.tx_type_id = nil
	m.addtx_type_id = nil
	m.clearedFields[item.FieldTxTypeID] = struct{}{}
}

// TxTypeIDCleared returns if the "tx_type_id" field was cleared in this mutation.
func (m *ItemMutation) TxTypeIDCleared() bool {
	_, ok := m.clearedFields[item.FieldTxTypeID]
	return ok
}

// ResetTxTypeID resets all changes to the "tx_type_id" field.
func (m *ItemMutation) ResetTxTypeID() {
	m.tx_type_id = nil
	m.addtx_type_id = nil
	delete(m.clearedFields, item.FieldTxTypeID)
}

// SetSku sets the "sku" field.
func (m *ItemMutation) SetSku(s string) {
	m.sku = &s
}

// Sku returns the value of the "sku" field in the mutation.
func (m *ItemMutation) Sku() (r string, exists bool) {
	v := m.sku
	if v == nil {
		return
	}
	return *v, true
}

// OldSku returns the old "sku" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldSku(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSku is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSku requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSku: %w", err)
	}
	return oldValue.Sku, nil
}

// ClearSku clears the value of the "sku" field.
func (m *ItemMutation) ClearSku() {
	m.sku = nil
	m.clearedFields[item.FieldSku] = struct{}{}
}

// SkuCleared returns if the "sku" field was cleared in this mutation.
func (m *ItemMutation) SkuCleared() bool {
	_, ok := m.clearedFields[item.FieldSku]
	return ok
}

// ResetSku resets all changes to the "sku" field.
func (m *ItemMutation) ResetSku() {
	m.sku = nil
	delete(m.clearedFields, item.FieldSku)
}

// SetTitle sets the "title" field.
func (m *ItemMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ItemMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *ItemMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[item.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *ItemMutation) TitleCleared() bool {
	_, ok := m.clearedFields[item.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *ItemMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, item.FieldTitle)
}

// SetSubTitle sets the "sub_title" field.
func (m *ItemMutation) SetSubTitle(s string) {
	m.sub_title = &s
}

// SubTitle returns the value of the "sub_title" field in the mutation.
func (m *ItemMutation) SubTitle() (r string, exists bool) {
	v := m.sub_title
	if v == nil {
		return
	}
	return *v, true
}

// OldSubTitle returns the old "sub_title" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldSubTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubTitle: %w", err)
	}
	return oldValue.SubTitle, nil
}

// ClearSubTitle clears the value of the "sub_title" field.
func (m *ItemMutation) ClearSubTitle() {
	m.sub_title = nil
	m.clearedFields[item.FieldSubTitle] = struct{}{}
}

// SubTitleCleared returns if the "sub_title" field was cleared in this mutation.
func (m *ItemMutation) SubTitleCleared() bool {
	_, ok := m.clearedFields[item.FieldSubTitle]
	return ok
}

// ResetSubTitle resets all changes to the "sub_title" field.
func (m *ItemMutation) ResetSubTitle() {
	m.sub_title = nil
	delete(m.clearedFields, item.FieldSubTitle)
}

// SetStatusID sets the "status_id" field.
func (m *ItemMutation) SetStatusID(i int64) {
	m.status_id = &i
	m.addstatus_id = nil
}

// StatusID returns the value of the "status_id" field in the mutation.
func (m *ItemMutation) StatusID() (r int64, exists bool) {
	v := m.status_id
	if v == nil {
		return
	}
	return *v, true
}

// OldStatusID returns the old "status_id" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldStatusID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatusID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatusID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatusID: %w", err)
	}
	return oldValue.StatusID, nil
}

// AddStatusID adds i to the "status_id" field.
func (m *ItemMutation) AddStatusID(i int64) {
	if m.addstatus_id != nil {
		*m.addstatus_id += i
	} else {
		m.addstatus_id = &i
	}
}

// AddedStatusID returns the value that was added to the "status_id" field in this mutation.
func (m *ItemMutation) AddedStatusID() (r int64, exists bool) {
	v := m.addstatus_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatusID clears the value of the "status_id" field.
func (m *ItemMutation) ClearStatusID() {
	m.status_id = nil
	m.addstatus_id = nil
	m.clearedFields[item.FieldStatusID] = struct{}{}
}

// StatusIDCleared returns if the "status_id" field was cleared in this mutation.
func (m *ItemMutation) StatusIDCleared() bool {
	_, ok := m.clearedFields[item.FieldStatusID]
	return ok
}

// ResetStatusID resets all changes to the "status_id" field.
func (m *ItemMutation) ResetStatusID() {
	m.status_id = nil
	m.addstatus_id = nil
	delete(m.clearedFields, item.FieldStatusID)
}

// SetNoIndex sets the "no_index" field.
func (m *ItemMutation) SetNoIndex(b bool) {
	m.no_index = &b
}

// NoIndex returns the value of the "no_index" field in the mutation.
func (m *ItemMutation) NoIndex() (r bool, exists bool) {
	v := m.no_index
	if v == nil {
		return
	}
	return *v, true
}

// OldNoIndex returns the old "no_index" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldNoIndex(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNoIndex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNoIndex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNoIndex: %w", err)
	}
	return oldValue.NoIndex, nil
}

// ClearNoIndex clears the value of the "no_index" field.
func (m *ItemMutation) ClearNoIndex() {
	m.no_index = nil
	m.clearedFields[item.FieldNoIndex] = struct{}{}
}

// NoIndexCleared returns if the "no_index" field was cleared in this mutation.
func (m *ItemMutation) NoIndexCleared() bool {
	_, ok := m.clearedFields[item.FieldNoIndex]
	return ok
}

// ResetNoIndex resets all changes to the "no_index" field.
func (m *ItemMutation) ResetNoIndex() {
	m.no_index = nil
	delete(m.clearedFields, item.FieldNoIndex)
}

// SetItemCategoryID sets the "item_category_id" field.
func (m *ItemMutation) SetItemCategoryID(i int64) {
	m.item_category_id = &i
	m.additem_category_id = nil
}

// ItemCategoryID returns the value of the "item_category_id" field in the mutation.
func (m *ItemMutation) ItemCategoryID() (r int64, exists bool) {
	v := m.item_category_id
	if v == nil {
		return
	}
	return *v, true
}

// OldItemCategoryID returns the old "item_category_id" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldItemCategoryID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldItemCategoryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldItemCategoryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldItemCategoryID: %w", err)
	}
	return oldValue.ItemCategoryID, nil
}

// AddItemCategoryID adds i to the "item_category_id" field.
func (m *ItemMutation) AddItemCategoryID(i int64) {
	if m.additem_category_id != nil {
		*m.additem_category_id += i
	} else {
		m.additem_category_id = &i
	}
}

// AddedItemCategoryID returns the value that was added to the "item_category_id" field in this mutation.
func (m *ItemMutation) AddedItemCategoryID() (r int64, exists bool) {
	v := m.additem_category_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearItemCategoryID clears the value of the "item_category_id" field.
func (m *ItemMutation) ClearItemCategoryID() {
	m.item_category_id = nil
	m.additem_category_id = nil
	m.clearedFields[item.FieldItemCategoryID] = struct{}{}
}

// ItemCategoryIDCleared returns if the "item_category_id" field was cleared in this mutation.
func (m *ItemMutation) ItemCategoryIDCleared() bool {
	_, ok := m.clearedFields[item.FieldItemCategoryID]
	return ok
}

// ResetItemCategoryID resets all changes to the "item_category_id" field.
func (m *ItemMutation) ResetItemCategoryID() {
	m.item_category_id = nil
	m.additem_category_id = nil
	delete(m.clearedFields, item.FieldItemCategoryID)
}

// SetBaseOnSalePrice sets the "base_on_sale_price" field.
func (m *ItemMutation) SetBaseOnSalePrice(b bool) {
	m.base_on_sale_price = &b
}

// BaseOnSalePrice returns the value of the "base_on_sale_price" field in the mutation.
func (m *ItemMutation) BaseOnSalePrice() (r bool, exists bool) {
	v := m.base_on_sale_price
	if v == nil {
		return
	}
	return *v, true
}

// OldBaseOnSalePrice returns the old "base_on_sale_price" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldBaseOnSalePrice(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBaseOnSalePrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBaseOnSalePrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBaseOnSalePrice: %w", err)
	}
	return oldValue.BaseOnSalePrice, nil
}

// ClearBaseOnSalePrice clears the value of the "base_on_sale_price" field.
func (m *ItemMutation) ClearBaseOnSalePrice() {
	m.base_on_sale_price = nil
	m.clearedFields[item.FieldBaseOnSalePrice] = struct{}{}
}

// BaseOnSalePriceCleared returns if the "base_on_sale_price" field was cleared in this mutation.
func (m *ItemMutation) BaseOnSalePriceCleared() bool {
	_, ok := m.clearedFields[item.FieldBaseOnSalePrice]
	return ok
}

// ResetBaseOnSalePrice resets all changes to the "base_on_sale_price" field.
func (m *ItemMutation) ResetBaseOnSalePrice() {
	m.base_on_sale_price = nil
	delete(m.clearedFields, item.FieldBaseOnSalePrice)
}

// SetRetailPrice sets the "retail_price" field.
func (m *ItemMutation) SetRetailPrice(f float64) {
	m.retail_price = &f
	m.addretail_price = nil
}

// RetailPrice returns the value of the "retail_price" field in the mutation.
func (m *ItemMutation) RetailPrice() (r float64, exists bool) {
	v := m.retail_price
	if v == nil {
		return
	}
	return *v, true
}

// OldRetailPrice returns the old "retail_price" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldRetailPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRetailPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRetailPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRetailPrice: %w", err)
	}
	return oldValue.RetailPrice, nil
}

// AddRetailPrice adds f to the "retail_price" field.
func (m *ItemMutation) AddRetailPrice(f float64) {
	if m.addretail_price != nil {
		*m.addretail_price += f
	} else {
		m.addretail_price = &f
	}
}

// AddedRetailPrice returns the value that was added to the "retail_price" field in this mutation.
func (m *ItemMutation) AddedRetailPrice() (r float64, exists bool) {
	v := m.addretail_price
	if v == nil {
		return
	}
	return *v, true
}

// ClearRetailPrice clears the value of the "retail_price" field.
func (m *ItemMutation) ClearRetailPrice() {
	m.retail_price = nil
	m.addretail_price = nil
	m.clearedFields[item.FieldRetailPrice] = struct{}{}
}

// RetailPriceCleared returns if the "retail_price" field was cleared in this mutation.
func (m *ItemMutation) RetailPriceCleared() bool {
	_, ok := m.clearedFields[item.FieldRetailPrice]
	return ok
}

// ResetRetailPrice resets all changes to the "retail_price" field.
func (m *ItemMutation) ResetRetailPrice() {
	m.retail_price = nil
	m.addretail_price = nil
	delete(m.clearedFields, item.FieldRetailPrice)
}

// SetSalePrice sets the "sale_price" field.
func (m *ItemMutation) SetSalePrice(f float64) {
	m.sale_price = &f
	m.addsale_price = nil
}

// SalePrice returns the value of the "sale_price" field in the mutation.
func (m *ItemMutation) SalePrice() (r float64, exists bool) {
	v := m.sale_price
	if v == nil {
		return
	}
	return *v, true
}

// OldSalePrice returns the old "sale_price" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldSalePrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSalePrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSalePrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSalePrice: %w", err)
	}
	return oldValue.SalePrice, nil
}

// AddSalePrice adds f to the "sale_price" field.
func (m *ItemMutation) AddSalePrice(f float64) {
	if m.addsale_price != nil {
		*m.addsale_price += f
	} else {
		m.addsale_price = &f
	}
}

// AddedSalePrice returns the value that was added to the "sale_price" field in this mutation.
func (m *ItemMutation) AddedSalePrice() (r float64, exists bool) {
	v := m.addsale_price
	if v == nil {
		return
	}
	return *v, true
}

// ClearSalePrice clears the value of the "sale_price" field.
func (m *ItemMutation) ClearSalePrice() {
	m.sale_price = nil
	m.addsale_price = nil
	m.clearedFields[item.FieldSalePrice] = struct{}{}
}

// SalePriceCleared returns if the "sale_price" field was cleared in this mutation.
func (m *ItemMutation) SalePriceCleared() bool {
	_, ok := m.clearedFields[item.FieldSalePrice]
	return ok
}

// ResetSalePrice resets all changes to the "sale_price" field.
func (m *ItemMutation) ResetSalePrice() {
	m.sale_price = nil
	m.addsale_price = nil
	delete(m.clearedFields, item.FieldSalePrice)
}

// SetShippingProfileIDNum sets the "shipping_profile_id_num" field.
func (m *ItemMutation) SetShippingProfileIDNum(i int64) {
	m.shipping_profile_id_num = &i
	m.addshipping_profile_id_num = nil
}

// ShippingProfileIDNum returns the value of the "shipping_profile_id_num" field in the mutation.
func (m *ItemMutation) ShippingProfileIDNum() (r int64, exists bool) {
	v := m.shipping_profile_id_num
	if v == nil {
		return
	}
	return *v, true
}

// OldShippingProfileIDNum returns the old "shipping_profile_id_num" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldShippingProfileIDNum(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShippingProfileIDNum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShippingProfileIDNum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShippingProfileIDNum: %w", err)
	}
	return oldValue.ShippingProfileIDNum, nil
}

// AddShippingProfileIDNum adds i to the "shipping_profile_id_num" field.
func (m *ItemMutation) AddShippingProfileIDNum(i int64) {
	if m.addshipping_profile_id_num != nil {
		*m.addshipping_profile_id_num += i
	} else {
		m.addshipping_profile_id_num = &i
	}
}

// AddedShippingProfileIDNum returns the value that was added to the "shipping_profile_id_num" field in this mutation.
func (m *ItemMutation) AddedShippingProfileIDNum() (r int64, exists bool) {
	v := m.addshipping_profile_id_num
	if v == nil {
		return
	}
	return *v, true
}

// ClearShippingProfileIDNum clears the value of the "shipping_profile_id_num" field.
func (m *ItemMutation) ClearShippingProfileIDNum() {
	m.shipping_profile_id_num = nil
	m.addshipping_profile_id_num = nil
	m.clearedFields[item.FieldShippingProfileIDNum] = struct{}{}
}

// ShippingProfileIDNumCleared returns if the "shipping_profile_id_num" field was cleared in this mutation.
func (m *ItemMutation) ShippingProfileIDNumCleared() bool {
	_, ok := m.clearedFields[item.FieldShippingProfileIDNum]
	return ok
}

// ResetShippingProfileIDNum resets all changes to the "shipping_profile_id_num" field.
func (m *ItemMutation) ResetShippingProfileIDNum() {
	m.shipping_profile_id_num = nil
	m.addshipping_profile_id_num = nil
	delete(m.clearedFields, item.FieldShippingProfileIDNum)
}

// SetOptimizationIDNum sets the "optimization_id_num" field.
func (m *ItemMutation) SetOptimizationIDNum(i int64) {
	m.optimization_id_num = &i
	m.addoptimization_id_num = nil
}

// OptimizationIDNum returns the value of the "optimization_id_num" field in the mutation.
func (m *ItemMutation) OptimizationIDNum() (r int64, exists bool) {
	v := m.optimization_id_num
	if v == nil {
		return
	}
	return *v, true
}

// OldOptimizationIDNum returns the old "optimization_id_num" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldOptimizationIDNum(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOptimizationIDNum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOptimizationIDNum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOptimizationIDNum: %w", err)
	}
	return oldValue.OptimizationIDNum, nil
}

// AddOptimizationIDNum adds i to the "optimization_id_num" field.
func (m *ItemMutation) AddOptimizationIDNum(i int64) {
	if m.addoptimization_id_num != nil {
		*m.addoptimization_id_num += i
	} else {
		m.addoptimization_id_num = &i
	}
}

// AddedOptimizationIDNum returns the value that was added to the "optimization_id_num" field in this mutation.
func (m *ItemMutation) AddedOptimizationIDNum() (r int64, exists bool) {
	v := m.addoptimization_id_num
	if v == nil {
		return
	}
	return *v, true
}

// ClearOptimizationIDNum clears the value of the "optimization_id_num" field.
func (m *ItemMutation) ClearOptimizationIDNum() {
	m.optimization_id_num = nil
	m.addoptimization_id_num = nil
	m.clearedFields[item.FieldOptimizationIDNum] = struct{}{}
}

// OptimizationIDNumCleared returns if the "optimization_id_num" field was cleared in this mutation.
func (m *ItemMutation) OptimizationIDNumCleared() bool {
	_, ok := m.clearedFields[item.FieldOptimizationIDNum]
	return ok
}

// ResetOptimizationIDNum resets all changes to the "optimization_id_num" field.
func (m *ItemMutation) ResetOptimizationIDNum() {
	m.optimization_id_num = nil
	m.addoptimization_id_num = nil
	delete(m.clearedFields, item.FieldOptimizationIDNum)
}

// SetQty sets the "qty" field.
func (m *ItemMutation) SetQty(i int64) {
	m.qty = &i
	m.addqty = nil
}

// Qty returns the value of the "qty" field in the mutation.
func (m *ItemMutation) Qty() (r int64, exists bool) {
	v := m.qty
	if v == nil {
		return
	}
	return *v, true
}

// OldQty returns the old "qty" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldQty(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQty is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQty requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQty: %w", err)
	}
	return oldValue.Qty, nil
}

// AddQty adds i to the "qty" field.
func (m *ItemMutation) AddQty(i int64) {
	if m.addqty != nil {
		*m.addqty += i
	} else {
		m.addqty = &i
	}
}

// AddedQty returns the value that was added to the "qty" field in this mutation.
func (m *ItemMutation) AddedQty() (r int64, exists bool) {
	v := m.addqty
	if v == nil {
		return
	}
	return *v, true
}

// ClearQty clears the value of the "qty" field.
func (m *ItemMutation) ClearQty() {
	m.qty = nil
	m.addqty = nil
	m.clearedFields[item.FieldQty] = struct{}{}
}

// QtyCleared returns if the "qty" field was cleared in this mutation.
func (m *ItemMutation) QtyCleared() bool {
	_, ok := m.clearedFields[item.FieldQty]
	return ok
}

// ResetQty resets all changes to the "qty" field.
func (m *ItemMutation) ResetQty() {
	m.qty = nil
	m.addqty = nil
	delete(m.clearedFields, item.FieldQty)
}

// SetMaximumOrderQty sets the "maximum_order_qty" field.
func (m *ItemMutation) SetMaximumOrderQty(i int64) {
	m.maximum_order_qty = &i
	m.addmaximum_order_qty = nil
}

// MaximumOrderQty returns the value of the "maximum_order_qty" field in the mutation.
func (m *ItemMutation) MaximumOrderQty() (r int64, exists bool) {
	v := m.maximum_order_qty
	if v == nil {
		return
	}
	return *v, true
}

// OldMaximumOrderQty returns the old "maximum_order_qty" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldMaximumOrderQty(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaximumOrderQty is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaximumOrderQty requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaximumOrderQty: %w", err)
	}
	return oldValue.MaximumOrderQty, nil
}

// AddMaximumOrderQty adds i to the "maximum_order_qty" field.
func (m *ItemMutation) AddMaximumOrderQty(i int64) {
	if m.addmaximum_order_qty != nil {
		*m.addmaximum_order_qty += i
	} else {
		m.addmaximum_order_qty = &i
	}
}

// AddedMaximumOrderQty returns the value that was added to the "maximum_order_qty" field in this mutation.
func (m *ItemMutation) AddedMaximumOrderQty() (r int64, exists bool) {
	v := m.addmaximum_order_qty
	if v == nil {
		return
	}
	return *v, true
}

// ClearMaximumOrderQty clears the value of the "maximum_order_qty" field.
func (m *ItemMutation) ClearMaximumOrderQty() {
	m.maximum_order_qty = nil
	m.addmaximum_order_qty = nil
	m.clearedFields[item.FieldMaximumOrderQty] = struct{}{}
}

// MaximumOrderQtyCleared returns if the "maximum_order_qty" field was cleared in this mutation.
func (m *ItemMutation) MaximumOrderQtyCleared() bool {
	_, ok := m.clearedFields[item.FieldMaximumOrderQty]
	return ok
}

// ResetMaximumOrderQty resets all changes to the "maximum_order_qty" field.
func (m *ItemMutation) ResetMaximumOrderQty() {
	m.maximum_order_qty = nil
	m.addmaximum_order_qty = nil
	delete(m.clearedFields, item.FieldMaximumOrderQty)
}

// SetPkgWidth sets the "pkg_width" field.
func (m *ItemMutation) SetPkgWidth(f float64) {
	m.pkg_width = &f
	m.addpkg_width = nil
}

// PkgWidth returns the value of the "pkg_width" field in the mutation.
func (m *ItemMutation) PkgWidth() (r float64, exists bool) {
	v := m.pkg_width
	if v == nil {
		return
	}
	return *v, true
}

// OldPkgWidth returns the old "pkg_width" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldPkgWidth(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPkgWidth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPkgWidth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPkgWidth: %w", err)
	}
	return oldValue.PkgWidth, nil
}

// AddPkgWidth adds f to the "pkg_width" field.
func (m *ItemMutation) AddPkgWidth(f float64) {
	if m.addpkg_width != nil {
		*m.addpkg_width += f
	} else {
		m.addpkg_width = &f
	}
}

// AddedPkgWidth returns the value that was added to the "pkg_width" field in this mutation.
func (m *ItemMutation) AddedPkgWidth() (r float64, exists bool) {
	v := m.addpkg_width
	if v == nil {
		return
	}
	return *v, true
}

// ClearPkgWidth clears the value of the "pkg_width" field.
func (m *ItemMutation) ClearPkgWidth() {
	m.pkg_width = nil
	m.addpkg_width = nil
	m.clearedFields[item.FieldPkgWidth] = struct{}{}
}

// PkgWidthCleared returns if the "pkg_width" field was cleared in this mutation.
func (m *ItemMutation) PkgWidthCleared() bool {
	_, ok := m.clearedFields[item.FieldPkgWidth]
	return ok
}

// ResetPkgWidth resets all changes to the "pkg_width" field.
func (m *ItemMutation) ResetPkgWidth() {
	m.pkg_width = nil
	m.addpkg_width = nil
	delete(m.clearedFields, item.FieldPkgWidth)
}

// SetPkgHeight sets the "pkg_height" field.
func (m *ItemMutation) SetPkgHeight(f float64) {
	m.pkg_height = &f
	m.addpkg_height = nil
}

// PkgHeight returns the value of the "pkg_height" field in the mutation.
func (m *ItemMutation) PkgHeight() (r float64, exists bool) {
	v := m.pkg_height
	if v == nil {
		return
	}
	return *v, true
}

// OldPkgHeight returns the old "pkg_height" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldPkgHeight(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPkgHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPkgHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPkgHeight: %w", err)
	}
	return oldValue.PkgHeight, nil
}

// AddPkgHeight adds f to the "pkg_height" field.
func (m *ItemMutation) AddPkgHeight(f float64) {
	if m.addpkg_height != nil {
		*m.addpkg_height += f
	} else {
		m.addpkg_height = &f
	}
}

// AddedPkgHeight returns the value that was added to the "pkg_height" field in this mutation.
func (m *ItemMutation) AddedPkgHeight() (r float64, exists bool) {
	v := m.addpkg_height
	if v == nil {
		return
	}
	return *v, true
}

// ClearPkgHeight clears the value of the "pkg_height" field.
func (m *ItemMutation) ClearPkgHeight() {
	m.pkg_height = nil
	m.addpkg_height = nil
	m.clearedFields[item.FieldPkgHeight] = struct{}{}
}

// PkgHeightCleared returns if the "pkg_height" field was cleared in this mutation.
func (m *ItemMutation) PkgHeightCleared() bool {
	_, ok := m.clearedFields[item.FieldPkgHeight]
	return ok
}

// ResetPkgHeight resets all changes to the "pkg_height" field.
func (m *ItemMutation) ResetPkgHeight() {
	m.pkg_height = nil
	m.addpkg_height = nil
	delete(m.clearedFields, item.FieldPkgHeight)
}

// SetPkgLength sets the "pkg_length" field.
func (m *ItemMutation) SetPkgLength(f float64) {
	m.pkg_length = &f
	m.addpkg_length = nil
}

// PkgLength returns the value of the "pkg_length" field in the mutation.
func (m *ItemMutation) PkgLength() (r float64, exists bool) {
	v := m.pkg_length
	if v == nil {
		return
	}
	return *v, true
}

// OldPkgLength returns the old "pkg_length" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldPkgLength(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPkgLength is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPkgLength requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPkgLength: %w", err)
	}
	return oldValue.PkgLength, nil
}

// AddPkgLength adds f to the "pkg_length" field.
func (m *ItemMutation) AddPkgLength(f float64) {
	if m.addpkg_length != nil {
		*m.addpkg_length += f
	} else {
		m.addpkg_length = &f
	}
}

// AddedPkgLength returns the value that was added to the "pkg_length" field in this mutation.
func (m *ItemMutation) AddedPkgLength() (r float64, exists bool) {
	v := m.addpkg_length
	if v == nil {
		return
	}
	return *v, true
}

// ClearPkgLength clears the value of the "pkg_length" field.
func (m *ItemMutation) ClearPkgLength() {
	m.pkg_length = nil
	m.addpkg_length = nil
	m.clearedFields[item.FieldPkgLength] = struct{}{}
}

// PkgLengthCleared returns if the "pkg_length" field was cleared in this mutation.
func (m *ItemMutation) PkgLengthCleared() bool {
	_, ok := m.clearedFields[item.FieldPkgLength]
	return ok
}

// ResetPkgLength resets all changes to the "pkg_length" field.
func (m *ItemMutation) ResetPkgLength() {
	m.pkg_length = nil
	m.addpkg_length = nil
	delete(m.clearedFields, item.FieldPkgLength)
}

// SetPkgWeight sets the "pkg_weight" field.
func (m *ItemMutation) SetPkgWeight(f float64) {
	m.pkg_weight = &f
	m.addpkg_weight = nil
}

// PkgWeight returns the value of the "pkg_weight" field in the mutation.
func (m *ItemMutation) PkgWeight() (r float64, exists bool) {
	v := m.pkg_weight
	if v == nil {
		return
	}
	return *v, true
}

// OldPkgWeight returns the old "pkg_weight" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldPkgWeight(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPkgWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPkgWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPkgWeight: %w", err)
	}
	return oldValue.PkgWeight, nil
}

// AddPkgWeight adds f to the "pkg_weight" field.
func (m *ItemMutation) AddPkgWeight(f float64) {
	if m.addpkg_weight != nil {
		*m.addpkg_weight += f
	} else {
		m.addpkg_weight = &f
	}
}

// AddedPkgWeight returns the value that was added to the "pkg_weight" field in this mutation.
func (m *ItemMutation) AddedPkgWeight() (r float64, exists bool) {
	v := m.addpkg_weight
	if v == nil {
		return
	}
	return *v, true
}

// ClearPkgWeight clears the value of the "pkg_weight" field.
func (m *ItemMutation) ClearPkgWeight() {
	m.pkg_weight = nil
	m.addpkg_weight = nil
	m.clearedFields[item.FieldPkgWeight] = struct{}{}
}

// PkgWeightCleared returns if the "pkg_weight" field was cleared in this mutation.
func (m *ItemMutation) PkgWeightCleared() bool {
	_, ok := m.clearedFields[item.FieldPkgWeight]
	return ok
}

// ResetPkgWeight resets all changes to the "pkg_weight" field.
func (m *ItemMutation) ResetPkgWeight() {
	m.pkg_weight = nil
	m.addpkg_weight = nil
	delete(m.clearedFields, item.FieldPkgWeight)
}

// SetShortDesc sets the "short_desc" field.
func (m *ItemMutation) SetShortDesc(s string) {
	m.short_desc = &s
}

// ShortDesc returns the value of the "short_desc" field in the mutation.
func (m *ItemMutation) ShortDesc() (r string, exists bool) {
	v := m.short_desc
	if v == nil {
		return
	}
	return *v, true
}

// OldShortDesc returns the old "short_desc" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldShortDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShortDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShortDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShortDesc: %w", err)
	}
	return oldValue.ShortDesc, nil
}

// ClearShortDesc clears the value of the "short_desc" field.
func (m *ItemMutation) ClearShortDesc() {
	m.short_desc = nil
	m.clearedFields[item.FieldShortDesc] = struct{}{}
}

// ShortDescCleared returns if the "short_desc" field was cleared in this mutation.
func (m *ItemMutation) ShortDescCleared() bool {
	_, ok := m.clearedFields[item.FieldShortDesc]
	return ok
}

// ResetShortDesc resets all changes to the "short_desc" field.
func (m *ItemMutation) ResetShortDesc() {
	m.short_desc = nil
	delete(m.clearedFields, item.FieldShortDesc)
}

// SetDescr sets the "descr" field.
func (m *ItemMutation) SetDescr(s string) {
	m.descr = &s
}

// Descr returns the value of the "descr" field in the mutation.
func (m *ItemMutation) Descr() (r string, exists bool) {
	v := m.descr
	if v == nil {
		return
	}
	return *v, true
}

// OldDescr returns the old "descr" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldDescr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescr: %w", err)
	}
	return oldValue.Descr, nil
}

// ClearDescr clears the value of the "descr" field.
func (m *ItemMutation) ClearDescr() {
	m.descr = nil
	m.clearedFields[item.FieldDescr] = struct{}{}
}

// DescrCleared returns if the "descr" field was cleared in this mutation.
func (m *ItemMutation) DescrCleared() bool {
	_, ok := m.clearedFields[item.FieldDescr]
	return ok
}

// ResetDescr resets all changes to the "descr" field.
func (m *ItemMutation) ResetDescr() {
	m.descr = nil
	delete(m.clearedFields, item.FieldDescr)
}

// SetImageUrl1 sets the "image_url1" field.
func (m *ItemMutation) SetImageUrl1(s string) {
	m.image_url1 = &s
}

// ImageUrl1 returns the value of the "image_url1" field in the mutation.
func (m *ItemMutation) ImageUrl1() (r string, exists bool) {
	v := m.image_url1
	if v == nil {
		return
	}
	return *v, true
}

// OldImageUrl1 returns the old "image_url1" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldImageUrl1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageUrl1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageUrl1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageUrl1: %w", err)
	}
	return oldValue.ImageUrl1, nil
}

// ClearImageUrl1 clears the value of the "image_url1" field.
func (m *ItemMutation) ClearImageUrl1() {
	m.image_url1 = nil
	m.clearedFields[item.FieldImageUrl1] = struct{}{}
}

// ImageUrl1Cleared returns if the "image_url1" field was cleared in this mutation.
func (m *ItemMutation) ImageUrl1Cleared() bool {
	_, ok := m.clearedFields[item.FieldImageUrl1]
	return ok
}

// ResetImageUrl1 resets all changes to the "image_url1" field.
func (m *ItemMutation) ResetImageUrl1() {
	m.image_url1 = nil
	delete(m.clearedFields, item.FieldImageUrl1)
}

// SetImageUrl2 sets the "image_url2" field.
func (m *ItemMutation) SetImageUrl2(s string) {
	m.image_url2 = &s
}

// ImageUrl2 returns the value of the "image_url2" field in the mutation.
func (m *ItemMutation) ImageUrl2() (r string, exists bool) {
	v := m.image_url2
	if v == nil {
		return
	}
	return *v, true
}

// OldImageUrl2 returns the old "image_url2" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldImageUrl2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageUrl2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageUrl2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageUrl2: %w", err)
	}
	return oldValue.ImageUrl2, nil
}

// ClearImageUrl2 clears the value of the "image_url2" field.
func (m *ItemMutation) ClearImageUrl2() {
	m.image_url2 = nil
	m.clearedFields[item.FieldImageUrl2] = struct{}{}
}

// ImageUrl2Cleared returns if the "image_url2" field was cleared in this mutation.
func (m *ItemMutation) ImageUrl2Cleared() bool {
	_, ok := m.clearedFields[item.FieldImageUrl2]
	return ok
}

// ResetImageUrl2 resets all changes to the "image_url2" field.
func (m *ItemMutation) ResetImageUrl2() {
	m.image_url2 = nil
	delete(m.clearedFields, item.FieldImageUrl2)
}

// SetImageUrl3 sets the "image_url3" field.
func (m *ItemMutation) SetImageUrl3(s string) {
	m.image_url3 = &s
}

// ImageUrl3 returns the value of the "image_url3" field in the mutation.
func (m *ItemMutation) ImageUrl3() (r string, exists bool) {
	v := m.image_url3
	if v == nil {
		return
	}
	return *v, true
}

// OldImageUrl3 returns the old "image_url3" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldImageUrl3(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageUrl3 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageUrl3 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageUrl3: %w", err)
	}
	return oldValue.ImageUrl3, nil
}

// ClearImageUrl3 clears the value of the "image_url3" field.
func (m *ItemMutation) ClearImageUrl3() {
	m.image_url3 = nil
	m.clearedFields[item.FieldImageUrl3] = struct{}{}
}

// ImageUrl3Cleared returns if the "image_url3" field was cleared in this mutation.
func (m *ItemMutation) ImageUrl3Cleared() bool {
	_, ok := m.clearedFields[item.FieldImageUrl3]
	return ok
}

// ResetImageUrl3 resets all changes to the "image_url3" field.
func (m *ItemMutation) ResetImageUrl3() {
	m.image_url3 = nil
	delete(m.clearedFields, item.FieldImageUrl3)
}

// SetImageUrl4 sets the "image_url4" field.
func (m *ItemMutation) SetImageUrl4(s string) {
	m.image_url4 = &s
}

// ImageUrl4 returns the value of the "image_url4" field in the mutation.
func (m *ItemMutation) ImageUrl4() (r string, exists bool) {
	v := m.image_url4
	if v == nil {
		return
	}
	return *v, true
}

// OldImageUrl4 returns the old "image_url4" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldImageUrl4(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageUrl4 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageUrl4 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageUrl4: %w", err)
	}
	return oldValue.ImageUrl4, nil
}

// ClearImageUrl4 clears the value of the "image_url4" field.
func (m *ItemMutation) ClearImageUrl4() {
	m.image_url4 = nil
	m.clearedFields[item.FieldImageUrl4] = struct{}{}
}

// ImageUrl4Cleared returns if the "image_url4" field was cleared in this mutation.
func (m *ItemMutation) ImageUrl4Cleared() bool {
	_, ok := m.clearedFields[item.FieldImageUrl4]
	return ok
}

// ResetImageUrl4 resets all changes to the "image_url4" field.
func (m *ItemMutation) ResetImageUrl4() {
	m.image_url4 = nil
	delete(m.clearedFields, item.FieldImageUrl4)
}

// SetImageUrl5 sets the "image_url5" field.
func (m *ItemMutation) SetImageUrl5(s string) {
	m.image_url5 = &s
}

// ImageUrl5 returns the value of the "image_url5" field in the mutation.
func (m *ItemMutation) ImageUrl5() (r string, exists bool) {
	v := m.image_url5
	if v == nil {
		return
	}
	return *v, true
}

// OldImageUrl5 returns the old "image_url5" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldImageUrl5(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageUrl5 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageUrl5 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageUrl5: %w", err)
	}
	return oldValue.ImageUrl5, nil
}

// ClearImageUrl5 clears the value of the "image_url5" field.
func (m *ItemMutation) ClearImageUrl5() {
	m.image_url5 = nil
	m.clearedFields[item.FieldImageUrl5] = struct{}{}
}

// ImageUrl5Cleared returns if the "image_url5" field was cleared in this mutation.
func (m *ItemMutation) ImageUrl5Cleared() bool {
	_, ok := m.clearedFields[item.FieldImageUrl5]
	return ok
}

// ResetImageUrl5 resets all changes to the "image_url5" field.
func (m *ItemMutation) ResetImageUrl5() {
	m.image_url5 = nil
	delete(m.clearedFields, item.FieldImageUrl5)
}

// SetCondition sets the "condition" field.
func (m *ItemMutation) SetCondition(s string) {
	m.condition = &s
}

// Condition returns the value of the "condition" field in the mutation.
func (m *ItemMutation) Condition() (r string, exists bool) {
	v := m.condition
	if v == nil {
		return
	}
	return *v, true
}

// OldCondition returns the old "condition" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldCondition(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCondition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCondition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCondition: %w", err)
	}
	return oldValue.Condition, nil
}

// ClearCondition clears the value of the "condition" field.
func (m *ItemMutation) ClearCondition() {
	m.condition = nil
	m.clearedFields[item.FieldCondition] = struct{}{}
}

// ConditionCleared returns if the "condition" field was cleared in this mutation.
func (m *ItemMutation) ConditionCleared() bool {
	_, ok := m.clearedFields[item.FieldCondition]
	return ok
}

// ResetCondition resets all changes to the "condition" field.
func (m *ItemMutation) ResetCondition() {
	m.condition = nil
	delete(m.clearedFields, item.FieldCondition)
}

// SetBrand sets the "brand" field.
func (m *ItemMutation) SetBrand(s string) {
	m.brand = &s
}

// Brand returns the value of the "brand" field in the mutation.
func (m *ItemMutation) Brand() (r string, exists bool) {
	v := m.brand
	if v == nil {
		return
	}
	return *v, true
}

// OldBrand returns the old "brand" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldBrand(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBrand is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBrand requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBrand: %w", err)
	}
	return oldValue.Brand, nil
}

// ClearBrand clears the value of the "brand" field.
func (m *ItemMutation) ClearBrand() {
	m.brand = nil
	m.clearedFields[item.FieldBrand] = struct{}{}
}

// BrandCleared returns if the "brand" field was cleared in this mutation.
func (m *ItemMutation) BrandCleared() bool {
	_, ok := m.clearedFields[item.FieldBrand]
	return ok
}

// ResetBrand resets all changes to the "brand" field.
func (m *ItemMutation) ResetBrand() {
	m.brand = nil
	delete(m.clearedFields, item.FieldBrand)
}

// SetGender sets the "gender" field.
func (m *ItemMutation) SetGender(s string) {
	m.gender = &s
}

// Gender returns the value of the "gender" field in the mutation.
func (m *ItemMutation) Gender() (r string, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldGender(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ClearGender clears the value of the "gender" field.
func (m *ItemMutation) ClearGender() {
	m.gender = nil
	m.clearedFields[item.FieldGender] = struct{}{}
}

// GenderCleared returns if the "gender" field was cleared in this mutation.
func (m *ItemMutation) GenderCleared() bool {
	_, ok := m.clearedFields[item.FieldGender]
	return ok
}

// ResetGender resets all changes to the "gender" field.
func (m *ItemMutation) ResetGender() {
	m.gender = nil
	delete(m.clearedFields, item.FieldGender)
}

// SetAgeGroup sets the "age_group" field.
func (m *ItemMutation) SetAgeGroup(s string) {
	m.age_group = &s
}

// AgeGroup returns the value of the "age_group" field in the mutation.
func (m *ItemMutation) AgeGroup() (r string, exists bool) {
	v := m.age_group
	if v == nil {
		return
	}
	return *v, true
}

// OldAgeGroup returns the old "age_group" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldAgeGroup(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAgeGroup is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAgeGroup requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAgeGroup: %w", err)
	}
	return oldValue.AgeGroup, nil
}

// ClearAgeGroup clears the value of the "age_group" field.
func (m *ItemMutation) ClearAgeGroup() {
	m.age_group = nil
	m.clearedFields[item.FieldAgeGroup] = struct{}{}
}

// AgeGroupCleared returns if the "age_group" field was cleared in this mutation.
func (m *ItemMutation) AgeGroupCleared() bool {
	_, ok := m.clearedFields[item.FieldAgeGroup]
	return ok
}

// ResetAgeGroup resets all changes to the "age_group" field.
func (m *ItemMutation) ResetAgeGroup() {
	m.age_group = nil
	delete(m.clearedFields, item.FieldAgeGroup)
}

// SetColor sets the "color" field.
func (m *ItemMutation) SetColor(s string) {
	m.color = &s
}

// Color returns the value of the "color" field in the mutation.
func (m *ItemMutation) Color() (r string, exists bool) {
	v := m.color
	if v == nil {
		return
	}
	return *v, true
}

// OldColor returns the old "color" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldColor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldColor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldColor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldColor: %w", err)
	}
	return oldValue.Color, nil
}

// ClearColor clears the value of the "color" field.
func (m *ItemMutation) ClearColor() {
	m.color = nil
	m.clearedFields[item.FieldColor] = struct{}{}
}

// ColorCleared returns if the "color" field was cleared in this mutation.
func (m *ItemMutation) ColorCleared() bool {
	_, ok := m.clearedFields[item.FieldColor]
	return ok
}

// ResetColor resets all changes to the "color" field.
func (m *ItemMutation) ResetColor() {
	m.color = nil
	delete(m.clearedFields, item.FieldColor)
}

// SetSize sets the "size" field.
func (m *ItemMutation) SetSize(s string) {
	m.size = &s
}

// Size returns the value of the "size" field in the mutation.
func (m *ItemMutation) Size() (r string, exists bool) {
	v := m.size
	if v == nil {
		return
	}
	return *v, true
}

// OldSize returns the old "size" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldSize(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSize: %w", err)
	}
	return oldValue.Size, nil
}

// ClearSize clears the value of the "size" field.
func (m *ItemMutation) ClearSize() {
	m.size = nil
	m.clearedFields[item.FieldSize] = struct{}{}
}

// SizeCleared returns if the "size" field was cleared in this mutation.
func (m *ItemMutation) SizeCleared() bool {
	_, ok := m.clearedFields[item.FieldSize]
	return ok
}

// ResetSize resets all changes to the "size" field.
func (m *ItemMutation) ResetSize() {
	m.size = nil
	delete(m.clearedFields, item.FieldSize)
}

// SetUxmItemIDNum sets the "uxm_item_id_num" field.
func (m *ItemMutation) SetUxmItemIDNum(i int64) {
	m.uxm_item_id_num = &i
	m.adduxm_item_id_num = nil
}

// UxmItemIDNum returns the value of the "uxm_item_id_num" field in the mutation.
func (m *ItemMutation) UxmItemIDNum() (r int64, exists bool) {
	v := m.uxm_item_id_num
	if v == nil {
		return
	}
	return *v, true
}

// OldUxmItemIDNum returns the old "uxm_item_id_num" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldUxmItemIDNum(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUxmItemIDNum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUxmItemIDNum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUxmItemIDNum: %w", err)
	}
	return oldValue.UxmItemIDNum, nil
}

// AddUxmItemIDNum adds i to the "uxm_item_id_num" field.
func (m *ItemMutation) AddUxmItemIDNum(i int64) {
	if m.adduxm_item_id_num != nil {
		*m.adduxm_item_id_num += i
	} else {
		m.adduxm_item_id_num = &i
	}
}

// AddedUxmItemIDNum returns the value that was added to the "uxm_item_id_num" field in this mutation.
func (m *ItemMutation) AddedUxmItemIDNum() (r int64, exists bool) {
	v := m.adduxm_item_id_num
	if v == nil {
		return
	}
	return *v, true
}

// ClearUxmItemIDNum clears the value of the "uxm_item_id_num" field.
func (m *ItemMutation) ClearUxmItemIDNum() {
	m.uxm_item_id_num = nil
	m.adduxm_item_id_num = nil
	m.clearedFields[item.FieldUxmItemIDNum] = struct{}{}
}

// UxmItemIDNumCleared returns if the "uxm_item_id_num" field was cleared in this mutation.
func (m *ItemMutation) UxmItemIDNumCleared() bool {
	_, ok := m.clearedFields[item.FieldUxmItemIDNum]
	return ok
}

// ResetUxmItemIDNum resets all changes to the "uxm_item_id_num" field.
func (m *ItemMutation) ResetUxmItemIDNum() {
	m.uxm_item_id_num = nil
	m.adduxm_item_id_num = nil
	delete(m.clearedFields, item.FieldUxmItemIDNum)
}

// SetSent sets the "sent" field.
func (m *ItemMutation) SetSent(b bool) {
	m.sent = &b
}

// Sent returns the value of the "sent" field in the mutation.
func (m *ItemMutation) Sent() (r bool, exists bool) {
	v := m.sent
	if v == nil {
		return
	}
	return *v, true
}

// OldSent returns the old "sent" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldSent(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSent: %w", err)
	}
	return oldValue.Sent, nil
}

// ClearSent clears the value of the "sent" field.
func (m *ItemMutation) ClearSent() {
	m.sent = nil
	m.clearedFields[item.FieldSent] = struct{}{}
}

// SentCleared returns if the "sent" field was cleared in this mutation.
func (m *ItemMutation) SentCleared() bool {
	_, ok := m.clearedFields[item.FieldSent]
	return ok
}

// ResetSent resets all changes to the "sent" field.
func (m *ItemMutation) ResetSent() {
	m.sent = nil
	delete(m.clearedFields, item.FieldSent)
}

// SetSentAt sets the "sent_at" field.
func (m *ItemMutation) SetSentAt(t time.Time) {
	m.sent_at = &t
}

// SentAt returns the value of the "sent_at" field in the mutation.
func (m *ItemMutation) SentAt() (r time.Time, exists bool) {
	v := m.sent_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSentAt returns the old "sent_at" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldSentAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSentAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSentAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSentAt: %w", err)
	}
	return oldValue.SentAt, nil
}

// ClearSentAt clears the value of the "sent_at" field.
func (m *ItemMutation) ClearSentAt() {
	m.sent_at = nil
	m.clearedFields[item.FieldSentAt] = struct{}{}
}

// SentAtCleared returns if the "sent_at" field was cleared in this mutation.
func (m *ItemMutation) SentAtCleared() bool {
	_, ok := m.clearedFields[item.FieldSentAt]
	return ok
}

// ResetSentAt resets all changes to the "sent_at" field.
func (m *ItemMutation) ResetSentAt() {
	m.sent_at = nil
	delete(m.clearedFields, item.FieldSentAt)
}

// SetHasError sets the "has_error" field.
func (m *ItemMutation) SetHasError(b bool) {
	m.has_error = &b
}

// HasError returns the value of the "has_error" field in the mutation.
func (m *ItemMutation) HasError() (r bool, exists bool) {
	v := m.has_error
	if v == nil {
		return
	}
	return *v, true
}

// OldHasError returns the old "has_error" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldHasError(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHasError is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHasError requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHasError: %w", err)
	}
	return oldValue.HasError, nil
}

// ClearHasError clears the value of the "has_error" field.
func (m *ItemMutation) ClearHasError() {
	m.has_error = nil
	m.clearedFields[item.FieldHasError] = struct{}{}
}

// HasErrorCleared returns if the "has_error" field was cleared in this mutation.
func (m *ItemMutation) HasErrorCleared() bool {
	_, ok := m.clearedFields[item.FieldHasError]
	return ok
}

// ResetHasError resets all changes to the "has_error" field.
func (m *ItemMutation) ResetHasError() {
	m.has_error = nil
	delete(m.clearedFields, item.FieldHasError)
}

// SetLastLogID sets the "last_log_id" field.
func (m *ItemMutation) SetLastLogID(i int64) {
	m.last_log_id = &i
	m.addlast_log_id = nil
}

// LastLogID returns the value of the "last_log_id" field in the mutation.
func (m *ItemMutation) LastLogID() (r int64, exists bool) {
	v := m.last_log_id
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLogID returns the old "last_log_id" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldLastLogID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLogID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLogID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLogID: %w", err)
	}
	return oldValue.LastLogID, nil
}

// AddLastLogID adds i to the "last_log_id" field.
func (m *ItemMutation) AddLastLogID(i int64) {
	if m.addlast_log_id != nil {
		*m.addlast_log_id += i
	} else {
		m.addlast_log_id = &i
	}
}

// AddedLastLogID returns the value that was added to the "last_log_id" field in this mutation.
func (m *ItemMutation) AddedLastLogID() (r int64, exists bool) {
	v := m.addlast_log_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearLastLogID clears the value of the "last_log_id" field.
func (m *ItemMutation) ClearLastLogID() {
	m.last_log_id = nil
	m.addlast_log_id = nil
	m.clearedFields[item.FieldLastLogID] = struct{}{}
}

// LastLogIDCleared returns if the "last_log_id" field was cleared in this mutation.
func (m *ItemMutation) LastLogIDCleared() bool {
	_, ok := m.clearedFields[item.FieldLastLogID]
	return ok
}

// ResetLastLogID resets all changes to the "last_log_id" field.
func (m *ItemMutation) ResetLastLogID() {
	m.last_log_id = nil
	m.addlast_log_id = nil
	delete(m.clearedFields, item.FieldLastLogID)
}

// SetFeedResponse sets the "feed_response" field.
func (m *ItemMutation) SetFeedResponse(s string) {
	m.feed_response = &s
}

// FeedResponse returns the value of the "feed_response" field in the mutation.
func (m *ItemMutation) FeedResponse() (r string, exists bool) {
	v := m.feed_response
	if v == nil {
		return
	}
	return *v, true
}

// OldFeedResponse returns the old "feed_response" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldFeedResponse(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeedResponse is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeedResponse requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeedResponse: %w", err)
	}
	return oldValue.FeedResponse, nil
}

// ClearFeedResponse clears the value of the "feed_response" field.
func (m *ItemMutation) ClearFeedResponse() {
	m.feed_response = nil
	m.clearedFields[item.FieldFeedResponse] = struct{}{}
}

// FeedResponseCleared returns if the "feed_response" field was cleared in this mutation.
func (m *ItemMutation) FeedResponseCleared() bool {
	_, ok := m.clearedFields[item.FieldFeedResponse]
	return ok
}

// ResetFeedResponse resets all changes to the "feed_response" field.
func (m *ItemMutation) ResetFeedResponse() {
	m.feed_response = nil
	delete(m.clearedFields, item.FieldFeedResponse)
}

// SetKeywords sets the "keywords" field.
func (m *ItemMutation) SetKeywords(s string) {
	m.keywords = &s
}

// Keywords returns the value of the "keywords" field in the mutation.
func (m *ItemMutation) Keywords() (r string, exists bool) {
	v := m.keywords
	if v == nil {
		return
	}
	return *v, true
}

// OldKeywords returns the old "keywords" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldKeywords(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKeywords is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKeywords requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKeywords: %w", err)
	}
	return oldValue.Keywords, nil
}

// ClearKeywords clears the value of the "keywords" field.
func (m *ItemMutation) ClearKeywords() {
	m.keywords = nil
	m.clearedFields[item.FieldKeywords] = struct{}{}
}

// KeywordsCleared returns if the "keywords" field was cleared in this mutation.
func (m *ItemMutation) KeywordsCleared() bool {
	_, ok := m.clearedFields[item.FieldKeywords]
	return ok
}

// ResetKeywords resets all changes to the "keywords" field.
func (m *ItemMutation) ResetKeywords() {
	m.keywords = nil
	delete(m.clearedFields, item.FieldKeywords)
}

// SetSync sets the "sync" field.
func (m *ItemMutation) SetSync(b bool) {
	m.sync = &b
}

// Sync returns the value of the "sync" field in the mutation.
func (m *ItemMutation) Sync() (r bool, exists bool) {
	v := m.sync
	if v == nil {
		return
	}
	return *v, true
}

// OldSync returns the old "sync" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldSync(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSync is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSync requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSync: %w", err)
	}
	return oldValue.Sync, nil
}

// ClearSync clears the value of the "sync" field.
func (m *ItemMutation) ClearSync() {
	m.sync = nil
	m.clearedFields[item.FieldSync] = struct{}{}
}

// SyncCleared returns if the "sync" field was cleared in this mutation.
func (m *ItemMutation) SyncCleared() bool {
	_, ok := m.clearedFields[item.FieldSync]
	return ok
}

// ResetSync resets all changes to the "sync" field.
func (m *ItemMutation) ResetSync() {
	m.sync = nil
	delete(m.clearedFields, item.FieldSync)
}

// SetUserID sets the "user_id" field.
func (m *ItemMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ItemMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *ItemMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[item.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *ItemMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[item.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ItemMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, item.FieldUserID)
}

// SetShippingProfileID sets the "shipping_profile_id" field.
func (m *ItemMutation) SetShippingProfileID(s string) {
	m.shipping_profile_id = &s
}

// ShippingProfileID returns the value of the "shipping_profile_id" field in the mutation.
func (m *ItemMutation) ShippingProfileID() (r string, exists bool) {
	v := m.shipping_profile_id
	if v == nil {
		return
	}
	return *v, true
}

// OldShippingProfileID returns the old "shipping_profile_id" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldShippingProfileID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShippingProfileID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShippingProfileID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShippingProfileID: %w", err)
	}
	return oldValue.ShippingProfileID, nil
}

// ClearShippingProfileID clears the value of the "shipping_profile_id" field.
func (m *ItemMutation) ClearShippingProfileID() {
	m.shipping_profile_id = nil
	m.clearedFields[item.FieldShippingProfileID] = struct{}{}
}

// ShippingProfileIDCleared returns if the "shipping_profile_id" field was cleared in this mutation.
func (m *ItemMutation) ShippingProfileIDCleared() bool {
	_, ok := m.clearedFields[item.FieldShippingProfileID]
	return ok
}

// ResetShippingProfileID resets all changes to the "shipping_profile_id" field.
func (m *ItemMutation) ResetShippingProfileID() {
	m.shipping_profile_id = nil
	delete(m.clearedFields, item.FieldShippingProfileID)
}

// SetOptimizationID sets the "optimization_id" field.
func (m *ItemMutation) SetOptimizationID(s string) {
	m.optimization_id = &s
}

// OptimizationID returns the value of the "optimization_id" field in the mutation.
func (m *ItemMutation) OptimizationID() (r string, exists bool) {
	v := m.optimization_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOptimizationID returns the old "optimization_id" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldOptimizationID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOptimizationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOptimizationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOptimizationID: %w", err)
	}
	return oldValue.OptimizationID, nil
}

// ClearOptimizationID clears the value of the "optimization_id" field.
func (m *ItemMutation) ClearOptimizationID() {
	m.optimization_id = nil
	m.clearedFields[item.FieldOptimizationID] = struct{}{}
}

// OptimizationIDCleared returns if the "optimization_id" field was cleared in this mutation.
func (m *ItemMutation) OptimizationIDCleared() bool {
	_, ok := m.clearedFields[item.FieldOptimizationID]
	return ok
}

// ResetOptimizationID resets all changes to the "optimization_id" field.
func (m *ItemMutation) ResetOptimizationID() {
	m.optimization_id = nil
	delete(m.clearedFields, item.FieldOptimizationID)
}

// SetUxmItemID sets the "uxm_item_id" field.
func (m *ItemMutation) SetUxmItemID(s string) {
	m.uxm_item_id = &s
}

// UxmItemID returns the value of the "uxm_item_id" field in the mutation.
func (m *ItemMutation) UxmItemID() (r string, exists bool) {
	v := m.uxm_item_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUxmItemID returns the old "uxm_item_id" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldUxmItemID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUxmItemID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUxmItemID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUxmItemID: %w", err)
	}
	return oldValue.UxmItemID, nil
}

// ClearUxmItemID clears the value of the "uxm_item_id" field.
func (m *ItemMutation) ClearUxmItemID() {
	m.uxm_item_id = nil
	m.clearedFields[item.FieldUxmItemID] = struct{}{}
}

// UxmItemIDCleared returns if the "uxm_item_id" field was cleared in this mutation.
func (m *ItemMutation) UxmItemIDCleared() bool {
	_, ok := m.clearedFields[item.FieldUxmItemID]
	return ok
}

// ResetUxmItemID resets all changes to the "uxm_item_id" field.
func (m *ItemMutation) ResetUxmItemID() {
	m.uxm_item_id = nil
	delete(m.clearedFields, item.FieldUxmItemID)
}

// SetParentID sets the "parent_id" field.
func (m *ItemMutation) SetParentID(s string) {
	m.parent_id = &s
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *ItemMutation) ParentID() (r string, exists bool) {
	v := m.parent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldParentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ClearParentID clears the value of the "parent_id" field.
func (m *ItemMutation) ClearParentID() {
	m.parent_id = nil
	m.clearedFields[item.FieldParentID] = struct{}{}
}

// ParentIDCleared returns if the "parent_id" field was cleared in this mutation.
func (m *ItemMutation) ParentIDCleared() bool {
	_, ok := m.clearedFields[item.FieldParentID]
	return ok
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *ItemMutation) ResetParentID() {
	m.parent_id = nil
	delete(m.clearedFields, item.FieldParentID)
}

// SetItemTypeID sets the "item_type_id" field.
func (m *ItemMutation) SetItemTypeID(s string) {
	m.item_type_id = &s
}

// ItemTypeID returns the value of the "item_type_id" field in the mutation.
func (m *ItemMutation) ItemTypeID() (r string, exists bool) {
	v := m.item_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldItemTypeID returns the old "item_type_id" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldItemTypeID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldItemTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldItemTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldItemTypeID: %w", err)
	}
	return oldValue.ItemTypeID, nil
}

// ClearItemTypeID clears the value of the "item_type_id" field.
func (m *ItemMutation) ClearItemTypeID() {
	m.item_type_id = nil
	m.clearedFields[item.FieldItemTypeID] = struct{}{}
}

// ItemTypeIDCleared returns if the "item_type_id" field was cleared in this mutation.
func (m *ItemMutation) ItemTypeIDCleared() bool {
	_, ok := m.clearedFields[item.FieldItemTypeID]
	return ok
}

// ResetItemTypeID resets all changes to the "item_type_id" field.
func (m *ItemMutation) ResetItemTypeID() {
	m.item_type_id = nil
	delete(m.clearedFields, item.FieldItemTypeID)
}

// SetUID sets the "uid" field.
func (m *ItemMutation) SetUID(s string) {
	m.uid = &s
}

// UID returns the value of the "uid" field in the mutation.
func (m *ItemMutation) UID() (r string, exists bool) {
	v := m.uid
	if v == nil {
		return
	}
	return *v, true
}

// OldUID returns the old "uid" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUID: %w", err)
	}
	return oldValue.UID, nil
}

// ResetUID resets all changes to the "uid" field.
func (m *ItemMutation) ResetUID() {
	m.uid = nil
}

// SetIsParent sets the "is_parent" field.
func (m *ItemMutation) SetIsParent(b bool) {
	m.is_parent = &b
}

// IsParent returns the value of the "is_parent" field in the mutation.
func (m *ItemMutation) IsParent() (r bool, exists bool) {
	v := m.is_parent
	if v == nil {
		return
	}
	return *v, true
}

// OldIsParent returns the old "is_parent" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldIsParent(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsParent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsParent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsParent: %w", err)
	}
	return oldValue.IsParent, nil
}

// ClearIsParent clears the value of the "is_parent" field.
func (m *ItemMutation) ClearIsParent() {
	m.is_parent = nil
	m.clearedFields[item.FieldIsParent] = struct{}{}
}

// IsParentCleared returns if the "is_parent" field was cleared in this mutation.
func (m *ItemMutation) IsParentCleared() bool {
	_, ok := m.clearedFields[item.FieldIsParent]
	return ok
}

// ResetIsParent resets all changes to the "is_parent" field.
func (m *ItemMutation) ResetIsParent() {
	m.is_parent = nil
	delete(m.clearedFields, item.FieldIsParent)
}

// Where appends a list predicates to the ItemMutation builder.
func (m *ItemMutation) Where(ps ...predicate.Item) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ItemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ItemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Item, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ItemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ItemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Item).
func (m *ItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ItemMutation) Fields() []string {
	fields := make([]string, 0, 47)
	if m.tx_type_id != nil {
		fields = append(fields, item.FieldTxTypeID)
	}
	if m.sku != nil {
		fields = append(fields, item.FieldSku)
	}
	if m.title != nil {
		fields = append(fields, item.FieldTitle)
	}
	if m.sub_title != nil {
		fields = append(fields, item.FieldSubTitle)
	}
	if m.status_id != nil {
		fields = append(fields, item.FieldStatusID)
	}
	if m.no_index != nil {
		fields = append(fields, item.FieldNoIndex)
	}
	if m.item_category_id != nil {
		fields = append(fields, item.FieldItemCategoryID)
	}
	if m.base_on_sale_price != nil {
		fields = append(fields, item.FieldBaseOnSalePrice)
	}
	if m.retail_price != nil {
		fields = append(fields, item.FieldRetailPrice)
	}
	if m.sale_price != nil {
		fields = append(fields, item.FieldSalePrice)
	}
	if m.shipping_profile_id_num != nil {
		fields = append(fields, item.FieldShippingProfileIDNum)
	}
	if m.optimization_id_num != nil {
		fields = append(fields, item.FieldOptimizationIDNum)
	}
	if m.qty != nil {
		fields = append(fields, item.FieldQty)
	}
	if m.maximum_order_qty != nil {
		fields = append(fields, item.FieldMaximumOrderQty)
	}
	if m.pkg_width != nil {
		fields = append(fields, item.FieldPkgWidth)
	}
	if m.pkg_height != nil {
		fields = append(fields, item.FieldPkgHeight)
	}
	if m.pkg_length != nil {
		fields = append(fields, item.FieldPkgLength)
	}
	if m.pkg_weight != nil {
		fields = append(fields, item.FieldPkgWeight)
	}
	if m.short_desc != nil {
		fields = append(fields, item.FieldShortDesc)
	}
	if m.descr != nil {
		fields = append(fields, item.FieldDescr)
	}
	if m.image_url1 != nil {
		fields = append(fields, item.FieldImageUrl1)
	}
	if m.image_url2 != nil {
		fields = append(fields, item.FieldImageUrl2)
	}
	if m.image_url3 != nil {
		fields = append(fields, item.FieldImageUrl3)
	}
	if m.image_url4 != nil {
		fields = append(fields, item.FieldImageUrl4)
	}
	if m.image_url5 != nil {
		fields = append(fields, item.FieldImageUrl5)
	}
	if m.condition != nil {
		fields = append(fields, item.FieldCondition)
	}
	if m.brand != nil {
		fields = append(fields, item.FieldBrand)
	}
	if m.gender != nil {
		fields = append(fields, item.FieldGender)
	}
	if m.age_group != nil {
		fields = append(fields, item.FieldAgeGroup)
	}
	if m.color != nil {
		fields = append(fields, item.FieldColor)
	}
	if m.size != nil {
		fields = append(fields, item.FieldSize)
	}
	if m.uxm_item_id_num != nil {
		fields = append(fields, item.FieldUxmItemIDNum)
	}
	if m.sent != nil {
		fields = append(fields, item.FieldSent)
	}
	if m.sent_at != nil {
		fields = append(fields, item.FieldSentAt)
	}
	if m.has_error != nil {
		fields = append(fields, item.FieldHasError)
	}
	if m.last_log_id != nil {
		fields = append(fields, item.FieldLastLogID)
	}
	if m.feed_response != nil {
		fields = append(fields, item.FieldFeedResponse)
	}
	if m.keywords != nil {
		fields = append(fields, item.FieldKeywords)
	}
	if m.sync != nil {
		fields = append(fields, item.FieldSync)
	}
	if m.user_id != nil {
		fields = append(fields, item.FieldUserID)
	}
	if m.shipping_profile_id != nil {
		fields = append(fields, item.FieldShippingProfileID)
	}
	if m.optimization_id != nil {
		fields = append(fields, item.FieldOptimizationID)
	}
	if m.uxm_item_id != nil {
		fields = append(fields, item.FieldUxmItemID)
	}
	if m.parent_id != nil {
		fields = append(fields, item.FieldParentID)
	}
	if m.item_type_id != nil {
		fields = append(fields, item.FieldItemTypeID)
	}
	if m.uid != nil {
		fields = append(fields, item.FieldUID)
	}
	if m.is_parent != nil {
		fields = append(fields, item.FieldIsParent)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case item.FieldTxTypeID:
		return m.TxTypeID()
	case item.FieldSku:
		return m.Sku()
	case item.FieldTitle:
		return m.Title()
	case item.FieldSubTitle:
		return m.SubTitle()
	case item.FieldStatusID:
		return m.StatusID()
	case item.FieldNoIndex:
		return m.NoIndex()
	case item.FieldItemCategoryID:
		return m.ItemCategoryID()
	case item.FieldBaseOnSalePrice:
		return m.BaseOnSalePrice()
	case item.FieldRetailPrice:
		return m.RetailPrice()
	case item.FieldSalePrice:
		return m.SalePrice()
	case item.FieldShippingProfileIDNum:
		return m.ShippingProfileIDNum()
	case item.FieldOptimizationIDNum:
		return m.OptimizationIDNum()
	case item.FieldQty:
		return m.Qty()
	case item.FieldMaximumOrderQty:
		return m.MaximumOrderQty()
	case item.FieldPkgWidth:
		return m.PkgWidth()
	case item.FieldPkgHeight:
		return m.PkgHeight()
	case item.FieldPkgLength:
		return m.PkgLength()
	case item.FieldPkgWeight:
		return m.PkgWeight()
	case item.FieldShortDesc:
		return m.ShortDesc()
	case item.FieldDescr:
		return m.Descr()
	case item.FieldImageUrl1:
		return m.ImageUrl1()
	case item.FieldImageUrl2:
		return m.ImageUrl2()
	case item.FieldImageUrl3:
		return m.ImageUrl3()
	case item.FieldImageUrl4:
		return m.ImageUrl4()
	case item.FieldImageUrl5:
		return m.ImageUrl5()
	case item.FieldCondition:
		return m.Condition()
	case item.FieldBrand:
		return m.Brand()
	case item.FieldGender:
		return m.Gender()
	case item.FieldAgeGroup:
		return m.AgeGroup()
	case item.FieldColor:
		return m.Color()
	case item.FieldSize:
		return m.Size()
	case item.FieldUxmItemIDNum:
		return m.UxmItemIDNum()
	case item.FieldSent:
		return m.Sent()
	case item.FieldSentAt:
		return m.SentAt()
	case item.FieldHasError:
		return m.HasError()
	case item.FieldLastLogID:
		return m.LastLogID()
	case item.FieldFeedResponse:
		return m.FeedResponse()
	case item.FieldKeywords:
		return m.Keywords()
	case item.FieldSync:
		return m.Sync()
	case item.FieldUserID:
		return m.UserID()
	case item.FieldShippingProfileID:
		return m.ShippingProfileID()
	case item.FieldOptimizationID:
		return m.OptimizationID()
	case item.FieldUxmItemID:
		return m.UxmItemID()
	case item.FieldParentID:
		return m.ParentID()
	case item.FieldItemTypeID:
		return m.ItemTypeID()
	case item.FieldUID:
		return m.UID()
	case item.FieldIsParent:
		return m.IsParent()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case item.FieldTxTypeID:
		return m.OldTxTypeID(ctx)
	case item.FieldSku:
		return m.OldSku(ctx)
	case item.FieldTitle:
		return m.OldTitle(ctx)
	case item.FieldSubTitle:
		return m.OldSubTitle(ctx)
	case item.FieldStatusID:
		return m.OldStatusID(ctx)
	case item.FieldNoIndex:
		return m.OldNoIndex(ctx)
	case item.FieldItemCategoryID:
		return m.OldItemCategoryID(ctx)
	case item.FieldBaseOnSalePrice:
		return m.OldBaseOnSalePrice(ctx)
	case item.FieldRetailPrice:
		return m.OldRetailPrice(ctx)
	case item.FieldSalePrice:
		return m.OldSalePrice(ctx)
	case item.FieldShippingProfileIDNum:
		return m.OldShippingProfileIDNum(ctx)
	case item.FieldOptimizationIDNum:
		return m.OldOptimizationIDNum(ctx)
	case item.FieldQty:
		return m.OldQty(ctx)
	case item.FieldMaximumOrderQty:
		return m.OldMaximumOrderQty(ctx)
	case item.FieldPkgWidth:
		return m.OldPkgWidth(ctx)
	case item.FieldPkgHeight:
		return m.OldPkgHeight(ctx)
	case item.FieldPkgLength:
		return m.OldPkgLength(ctx)
	case item.FieldPkgWeight:
		return m.OldPkgWeight(ctx)
	case item.FieldShortDesc:
		return m.OldShortDesc(ctx)
	case item.FieldDescr:
		return m.OldDescr(ctx)
	case item.FieldImageUrl1:
		return m.OldImageUrl1(ctx)
	case item.FieldImageUrl2:
		return m.OldImageUrl2(ctx)
	case item.FieldImageUrl3:
		return m.OldImageUrl3(ctx)
	case item.FieldImageUrl4:
		return m.OldImageUrl4(ctx)
	case item.FieldImageUrl5:
		return m.OldImageUrl5(ctx)
	case item.FieldCondition:
		return m.OldCondition(ctx)
	case item.FieldBrand:
		return m.OldBrand(ctx)
	case item.FieldGender:
		return m.OldGender(ctx)
	case item.FieldAgeGroup:
		return m.OldAgeGroup(ctx)
	case item.FieldColor:
		return m.OldColor(ctx)
	case item.FieldSize:
		return m.OldSize(ctx)
	case item.FieldUxmItemIDNum:
		return m.OldUxmItemIDNum(ctx)
	case item.FieldSent:
		return m.OldSent(ctx)
	case item.FieldSentAt:
		return m.OldSentAt(ctx)
	case item.FieldHasError:
		return m.OldHasError(ctx)
	case item.FieldLastLogID:
		return m.OldLastLogID(ctx)
	case item.FieldFeedResponse:
		return m.OldFeedResponse(ctx)
	case item.FieldKeywords:
		return m.OldKeywords(ctx)
	case item.FieldSync:
		return m.OldSync(ctx)
	case item.FieldUserID:
		return m.OldUserID(ctx)
	case item.FieldShippingProfileID:
		return m.OldShippingProfileID(ctx)
	case item.FieldOptimizationID:
		return m.OldOptimizationID(ctx)
	case item.FieldUxmItemID:
		return m.OldUxmItemID(ctx)
	case item.FieldParentID:
		return m.OldParentID(ctx)
	case item.FieldItemTypeID:
		return m.OldItemTypeID(ctx)
	case item.FieldUID:
		return m.OldUID(ctx)
	case item.FieldIsParent:
		return m.OldIsParent(ctx)
	}
	return nil, fmt.Errorf("unknown Item field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case item.FieldTxTypeID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxTypeID(v)
		return nil
	case item.FieldSku:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSku(v)
		return nil
	case item.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case item.FieldSubTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubTitle(v)
		return nil
	case item.FieldStatusID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatusID(v)
		return nil
	case item.FieldNoIndex:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNoIndex(v)
		return nil
	case item.FieldItemCategoryID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetItemCategoryID(v)
		return nil
	case item.FieldBaseOnSalePrice:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBaseOnSalePrice(v)
		return nil
	case item.FieldRetailPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRetailPrice(v)
		return nil
	case item.FieldSalePrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSalePrice(v)
		return nil
	case item.FieldShippingProfileIDNum:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShippingProfileIDNum(v)
		return nil
	case item.FieldOptimizationIDNum:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOptimizationIDNum(v)
		return nil
	case item.FieldQty:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQty(v)
		return nil
	case item.FieldMaximumOrderQty:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaximumOrderQty(v)
		return nil
	case item.FieldPkgWidth:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPkgWidth(v)
		return nil
	case item.FieldPkgHeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPkgHeight(v)
		return nil
	case item.FieldPkgLength:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPkgLength(v)
		return nil
	case item.FieldPkgWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPkgWeight(v)
		return nil
	case item.FieldShortDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShortDesc(v)
		return nil
	case item.FieldDescr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescr(v)
		return nil
	case item.FieldImageUrl1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageUrl1(v)
		return nil
	case item.FieldImageUrl2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageUrl2(v)
		return nil
	case item.FieldImageUrl3:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageUrl3(v)
		return nil
	case item.FieldImageUrl4:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageUrl4(v)
		return nil
	case item.FieldImageUrl5:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageUrl5(v)
		return nil
	case item.FieldCondition:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCondition(v)
		return nil
	case item.FieldBrand:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBrand(v)
		return nil
	case item.FieldGender:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case item.FieldAgeGroup:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAgeGroup(v)
		return nil
	case item.FieldColor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetColor(v)
		return nil
	case item.FieldSize:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSize(v)
		return nil
	case item.FieldUxmItemIDNum:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUxmItemIDNum(v)
		return nil
	case item.FieldSent:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSent(v)
		return nil
	case item.FieldSentAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSentAt(v)
		return nil
	case item.FieldHasError:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHasError(v)
		return nil
	case item.FieldLastLogID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLogID(v)
		return nil
	case item.FieldFeedResponse:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeedResponse(v)
		return nil
	case item.FieldKeywords:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKeywords(v)
		return nil
	case item.FieldSync:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSync(v)
		return nil
	case item.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case item.FieldShippingProfileID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShippingProfileID(v)
		return nil
	case item.FieldOptimizationID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOptimizationID(v)
		return nil
	case item.FieldUxmItemID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUxmItemID(v)
		return nil
	case item.FieldParentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	case item.FieldItemTypeID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetItemTypeID(v)
		return nil
	case item.FieldUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUID(v)
		return nil
	case item.FieldIsParent:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsParent(v)
		return nil
	}
	return fmt.Errorf("unknown Item field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ItemMutation) AddedFields() []string {
	var fields []string
	if m.addtx_type_id != nil {
		fields = append(fields, item.FieldTxTypeID)
	}
	if m.addstatus_id != nil {
		fields = append(fields, item.FieldStatusID)
	}
	if m.additem_category_id != nil {
		fields = append(fields, item.FieldItemCategoryID)
	}
	if m.addretail_price != nil {
		fields = append(fields, item.FieldRetailPrice)
	}
	if m.addsale_price != nil {
		fields = append(fields, item.FieldSalePrice)
	}
	if m.addshipping_profile_id_num != nil {
		fields = append(fields, item.FieldShippingProfileIDNum)
	}
	if m.addoptimization_id_num != nil {
		fields = append(fields, item.FieldOptimizationIDNum)
	}
	if m.addqty != nil {
		fields = append(fields, item.FieldQty)
	}
	if m.addmaximum_order_qty != nil {
		fields = append(fields, item.FieldMaximumOrderQty)
	}
	if m.addpkg_width != nil {
		fields = append(fields, item.FieldPkgWidth)
	}
	if m.addpkg_height != nil {
		fields = append(fields, item.FieldPkgHeight)
	}
	if m.addpkg_length != nil {
		fields = append(fields, item.FieldPkgLength)
	}
	if m.addpkg_weight != nil {
		fields = append(fields, item.FieldPkgWeight)
	}
	if m.adduxm_item_id_num != nil {
		fields = append(fields, item.FieldUxmItemIDNum)
	}
	if m.addlast_log_id != nil {
		fields = append(fields, item.FieldLastLogID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ItemMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case item.FieldTxTypeID:
		return m.AddedTxTypeID()
	case item.FieldStatusID:
		return m.AddedStatusID()
	case item.FieldItemCategoryID:
		return m.AddedItemCategoryID()
	case item.FieldRetailPrice:
		return m.AddedRetailPrice()
	case item.FieldSalePrice:
		return m.AddedSalePrice()
	case item.FieldShippingProfileIDNum:
		return m.AddedShippingProfileIDNum()
	case item.FieldOptimizationIDNum:
		return m.AddedOptimizationIDNum()
	case item.FieldQty:
		return m.AddedQty()
	case item.FieldMaximumOrderQty:
		return m.AddedMaximumOrderQty()
	case item.FieldPkgWidth:
		return m.AddedPkgWidth()
	case item.FieldPkgHeight:
		return m.AddedPkgHeight()
	case item.FieldPkgLength:
		return m.AddedPkgLength()
	case item.FieldPkgWeight:
		return m.AddedPkgWeight()
	case item.FieldUxmItemIDNum:
		return m.AddedUxmItemIDNum()
	case item.FieldLastLogID:
		return m.AddedLastLogID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	case item.FieldTxTypeID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTxTypeID(v)
		return nil
	case item.FieldStatusID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatusID(v)
		return nil
	case item.FieldItemCategoryID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddItemCategoryID(v)
		return nil
	case item.FieldRetailPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRetailPrice(v)
		return nil
	case item.FieldSalePrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSalePrice(v)
		return nil
	case item.FieldShippingProfileIDNum:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShippingProfileIDNum(v)
		return nil
	case item.FieldOptimizationIDNum:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOptimizationIDNum(v)
		return nil
	case item.FieldQty:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQty(v)
		return nil
	case item.FieldMaximumOrderQty:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaximumOrderQty(v)
		return nil
	case item.FieldPkgWidth:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPkgWidth(v)
		return nil
	case item.FieldPkgHeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPkgHeight(v)
		return nil
	case item.FieldPkgLength:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPkgLength(v)
		return nil
	case item.FieldPkgWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPkgWeight(v)
		return nil
	case item.FieldUxmItemIDNum:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUxmItemIDNum(v)
		return nil
	case item.FieldLastLogID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLastLogID(v)
		return nil
	}
	return fmt.Errorf("unknown Item numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ItemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(item.FieldTxTypeID) {
		fields = append(fields, item.FieldTxTypeID)
	}
	if m.FieldCleared(item.FieldSku) {
		fields = append(fields, item.FieldSku)
	}
	if m.FieldCleared(item.FieldTitle) {
		fields = append(fields, item.FieldTitle)
	}
	if m.FieldCleared(item.FieldSubTitle) {
		fields = append(fields, item.FieldSubTitle)
	}
	if m.FieldCleared(item.FieldStatusID) {
		fields = append(fields, item.FieldStatusID)
	}
	if m.FieldCleared(item.FieldNoIndex) {
		fields = append(fields, item.FieldNoIndex)
	}
	if m.FieldCleared(item.FieldItemCategoryID) {
		fields = append(fields, item.FieldItemCategoryID)
	}
	if m.FieldCleared(item.FieldBaseOnSalePrice) {
		fields = append(fields, item.FieldBaseOnSalePrice)
	}
	if m.FieldCleared(item.FieldRetailPrice) {
		fields = append(fields, item.FieldRetailPrice)
	}
	if m.FieldCleared(item.FieldSalePrice) {
		fields = append(fields, item.FieldSalePrice)
	}
	if m.FieldCleared(item.FieldShippingProfileIDNum) {
		fields = append(fields, item.FieldShippingProfileIDNum)
	}
	if m.FieldCleared(item.FieldOptimizationIDNum) {
		fields = append(fields, item.FieldOptimizationIDNum)
	}
	if m.FieldCleared(item.FieldQty) {
		fields = append(fields, item.FieldQty)
	}
	if m.FieldCleared(item.FieldMaximumOrderQty) {
		fields = append(fields, item.FieldMaximumOrderQty)
	}
	if m.FieldCleared(item.FieldPkgWidth) {
		fields = append(fields, item.FieldPkgWidth)
	}
	if m.FieldCleared(item.FieldPkgHeight) {
		fields = append(fields, item.FieldPkgHeight)
	}
	if m.FieldCleared(item.FieldPkgLength) {
		fields = append(fields, item.FieldPkgLength)
	}
	if m.FieldCleared(item.FieldPkgWeight) {
		fields = append(fields, item.FieldPkgWeight)
	}
	if m.FieldCleared(item.FieldShortDesc) {
		fields = append(fields, item.FieldShortDesc)
	}
	if m.FieldCleared(item.FieldDescr) {
		fields = append(fields, item.FieldDescr)
	}
	if m.FieldCleared(item.FieldImageUrl1) {
		fields = append(fields, item.FieldImageUrl1)
	}
	if m.FieldCleared(item.FieldImageUrl2) {
		fields = append(fields, item.FieldImageUrl2)
	}
	if m.FieldCleared(item.FieldImageUrl3) {
		fields = append(fields, item.FieldImageUrl3)
	}
	if m.FieldCleared(item.FieldImageUrl4) {
		fields = append(fields, item.FieldImageUrl4)
	}
	if m.FieldCleared(item.FieldImageUrl5) {
		fields = append(fields, item.FieldImageUrl5)
	}
	if m.FieldCleared(item.FieldCondition) {
		fields = append(fields, item.FieldCondition)
	}
	if m.FieldCleared(item.FieldBrand) {
		fields = append(fields, item.FieldBrand)
	}
	if m.FieldCleared(item.FieldGender) {
		fields = append(fields, item.FieldGender)
	}
	if m.FieldCleared(item.FieldAgeGroup) {
		fields = append(fields, item.FieldAgeGroup)
	}
	if m.FieldCleared(item.FieldColor) {
		fields = append(fields, item.FieldColor)
	}
	if m.FieldCleared(item.FieldSize) {
		fields = append(fields, item.FieldSize)
	}
	if m.FieldCleared(item.FieldUxmItemIDNum) {
		fields = append(fields, item.FieldUxmItemIDNum)
	}
	if m.FieldCleared(item.FieldSent) {
		fields = append(fields, item.FieldSent)
	}
	if m.FieldCleared(item.FieldSentAt) {
		fields = append(fields, item.FieldSentAt)
	}
	if m.FieldCleared(item.FieldHasError) {
		fields = append(fields, item.FieldHasError)
	}
	if m.FieldCleared(item.FieldLastLogID) {
		fields = append(fields, item.FieldLastLogID)
	}
	if m.FieldCleared(item.FieldFeedResponse) {
		fields = append(fields, item.FieldFeedResponse)
	}
	if m.FieldCleared(item.FieldKeywords) {
		fields = append(fields, item.FieldKeywords)
	}
	if m.FieldCleared(item.FieldSync) {
		fields = append(fields, item.FieldSync)
	}
	if m.FieldCleared(item.FieldUserID) {
		fields = append(fields, item.FieldUserID)
	}
	if m.FieldCleared(item.FieldShippingProfileID) {
		fields = append(fields, item.FieldShippingProfileID)
	}
	if m.FieldCleared(item.FieldOptimizationID) {
		fields = append(fields, item.FieldOptimizationID)
	}
	if m.FieldCleared(item.FieldUxmItemID) {
		fields = append(fields, item.FieldUxmItemID)
	}
	if m.FieldCleared(item.FieldParentID) {
		fields = append(fields, item.FieldParentID)
	}
	if m.FieldCleared(item.FieldItemTypeID) {
		fields = append(fields, item.FieldItemTypeID)
	}
	if m.FieldCleared(item.FieldIsParent) {
		fields = append(fields, item.FieldIsParent)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ItemMutation) ClearField(name string) error {
	switch name {
	case item.FieldTxTypeID:
		m.ClearTxTypeID()
		return nil
	case item.FieldSku:
		m.ClearSku()
		return nil
	case item.FieldTitle:
		m.ClearTitle()
		return nil
	case item.FieldSubTitle:
		m.ClearSubTitle()
		return nil
	case item.FieldStatusID:
		m.ClearStatusID()
		return nil
	case item.FieldNoIndex:
		m.ClearNoIndex()
		return nil
	case item.FieldItemCategoryID:
		m.ClearItemCategoryID()
		return nil
	case item.FieldBaseOnSalePrice:
		m.ClearBaseOnSalePrice()
		return nil
	case item.FieldRetailPrice:
		m.ClearRetailPrice()
		return nil
	case item.FieldSalePrice:
		m.ClearSalePrice()
		return nil
	case item.FieldShippingProfileIDNum:
		m.ClearShippingProfileIDNum()
		return nil
	case item.FieldOptimizationIDNum:
		m.ClearOptimizationIDNum()
		return nil
	case item.FieldQty:
		m.ClearQty()
		return nil
	case item.FieldMaximumOrderQty:
		m.ClearMaximumOrderQty()
		return nil
	case item.FieldPkgWidth:
		m.ClearPkgWidth()
		return nil
	case item.FieldPkgHeight:
		m.ClearPkgHeight()
		return nil
	case item.FieldPkgLength:
		m.ClearPkgLength()
		return nil
	case item.FieldPkgWeight:
		m.ClearPkgWeight()
		return nil
	case item.FieldShortDesc:
		m.ClearShortDesc()
		return nil
	case item.FieldDescr:
		m.ClearDescr()
		return nil
	case item.FieldImageUrl1:
		m.ClearImageUrl1()
		return nil
	case item.FieldImageUrl2:
		m.ClearImageUrl2()
		return nil
	case item.FieldImageUrl3:
		m.ClearImageUrl3()
		return nil
	case item.FieldImageUrl4:
		m.ClearImageUrl4()
		return nil
	case item.FieldImageUrl5:
		m.ClearImageUrl5()
		return nil
	case item.FieldCondition:
		m.ClearCondition()
		return nil
	case item.FieldBrand:
		m.ClearBrand()
		return nil
	case item.FieldGender:
		m.ClearGender()
		return nil
	case item.FieldAgeGroup:
		m.ClearAgeGroup()
		return nil
	case item.FieldColor:
		m.ClearColor()
		return nil
	case item.FieldSize:
		m.ClearSize()
		return nil
	case item.FieldUxmItemIDNum:
		m.ClearUxmItemIDNum()
		return nil
	case item.FieldSent:
		m.ClearSent()
		return nil
	case item.FieldSentAt:
		m.ClearSentAt()
		return nil
	case item.FieldHasError:
		m.ClearHasError()
		return nil
	case item.FieldLastLogID:
		m.ClearLastLogID()
		return nil
	case item.FieldFeedResponse:
		m.ClearFeedResponse()
		return nil
	case item.FieldKeywords:
		m.ClearKeywords()
		return nil
	case item.FieldSync:
		m.ClearSync()
		return nil
	case item.FieldUserID:
		m.ClearUserID()
		return nil
	case item.FieldShippingProfileID:
		m.ClearShippingProfileID()
		return nil
	case item.FieldOptimizationID:
		m.ClearOptimizationID()
		return nil
	case item.FieldUxmItemID:
		m.ClearUxmItemID()
		return nil
	case item.FieldParentID:
		m.ClearParentID()
		return nil
	case item.FieldItemTypeID:
		m.ClearItemTypeID()
		return nil
	case item.FieldIsParent:
		m.ClearIsParent()
		return nil
	}
	return fmt.Errorf("unknown Item nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ItemMutation) ResetField(name string) error {
	switch name {
	case item.FieldTxTypeID:
		m.ResetTxTypeID()
		return nil
	case item.FieldSku:
		m.ResetSku()
		return nil
	case item.FieldTitle:
		m.ResetTitle()
		return nil
	case item.FieldSubTitle:
		m.ResetSubTitle()
		return nil
	case item.FieldStatusID:
		m.ResetStatusID()
		return nil
	case item.FieldNoIndex:
		m.ResetNoIndex()
		return nil
	case item.FieldItemCategoryID:
		m.ResetItemCategoryID()
		return nil
	case item.FieldBaseOnSalePrice:
		m.ResetBaseOnSalePrice()
		return nil
	case item.FieldRetailPrice:
		m.ResetRetailPrice()
		return nil
	case item.FieldSalePrice:
		m.ResetSalePrice()
		return nil
	case item.FieldShippingProfileIDNum:
		m.ResetShippingProfileIDNum()
		return nil
	case item.FieldOptimizationIDNum:
		m.ResetOptimizationIDNum()
		return nil
	case item.FieldQty:
		m.ResetQty()
		return nil
	case item.FieldMaximumOrderQty:
		m.ResetMaximumOrderQty()
		return nil
	case item.FieldPkgWidth:
		m.ResetPkgWidth()
		return nil
	case item.FieldPkgHeight:
		m.ResetPkgHeight()
		return nil
	case item.FieldPkgLength:
		m.ResetPkgLength()
		return nil
	case item.FieldPkgWeight:
		m.ResetPkgWeight()
		return nil
	case item.FieldShortDesc:
		m.ResetShortDesc()
		return nil
	case item.FieldDescr:
		m.ResetDescr()
		return nil
	case item.FieldImageUrl1:
		m.ResetImageUrl1()
		return nil
	case item.FieldImageUrl2:
		m.ResetImageUrl2()
		return nil
	case item.FieldImageUrl3:
		m.ResetImageUrl3()
		return nil
	case item.FieldImageUrl4:
		m.ResetImageUrl4()
		return nil
	case item.FieldImageUrl5:
		m.ResetImageUrl5()
		return nil
	case item.FieldCondition:
		m.ResetCondition()
		return nil
	case item.FieldBrand:
		m.ResetBrand()
		return nil
	case item.FieldGender:
		m.ResetGender()
		return nil
	case item.FieldAgeGroup:
		m.ResetAgeGroup()
		return nil
	case item.FieldColor:
		m.ResetColor()
		return nil
	case item.FieldSize:
		m.ResetSize()
		return nil
	case item.FieldUxmItemIDNum:
		m.ResetUxmItemIDNum()
		return nil
	case item.FieldSent:
		m.ResetSent()
		return nil
	case item.FieldSentAt:
		m.ResetSentAt()
		return nil
	case item.FieldHasError:
		m.ResetHasError()
		return nil
	case item.FieldLastLogID:
		m.ResetLastLogID()
		return nil
	case item.FieldFeedResponse:
		m.ResetFeedResponse()
		return nil
	case item.FieldKeywords:
		m.ResetKeywords()
		return nil
	case item.FieldSync:
		m.ResetSync()
		return nil
	case item.FieldUserID:
		m.ResetUserID()
		return nil
	case item.FieldShippingProfileID:
		m.ResetShippingProfileID()
		return nil
	case item.FieldOptimizationID:
		m.ResetOptimizationID()
		return nil
	case item.FieldUxmItemID:
		m.ResetUxmItemID()
		return nil
	case item.FieldParentID:
		m.ResetParentID()
		return nil
	case item.FieldItemTypeID:
		m.ResetItemTypeID()
		return nil
	case item.FieldUID:
		m.ResetUID()
		return nil
	case item.FieldIsParent:
		m.ResetIsParent()
		return nil
	}
	return fmt.Errorf("unknown Item field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ItemMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ItemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ItemMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ItemMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Item unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ItemMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Item edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	email         *string
	api_key       *string
	status        *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetAPIKey sets the "api_key" field.
func (m *UserMutation) SetAPIKey(s string) {
	m.api_key = &s
}

// APIKey returns the value of the "api_key" field in the mutation.
func (m *UserMutation) APIKey() (r string, exists bool) {
	v := m.api_key
	if v == nil {
		return
	}
	return *v, true
}

// OldAPIKey returns the old "api_key" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAPIKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAPIKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAPIKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAPIKey: %w", err)
	}
	return oldValue.APIKey, nil
}

// ClearAPIKey clears the value of the "api_key" field.
func (m *UserMutation) ClearAPIKey() {
	m.api_key = nil
	m.clearedFields[user.FieldAPIKey] = struct{}{}
}

// APIKeyCleared returns if the "api_key" field was cleared in this mutation.
func (m *UserMutation) APIKeyCleared() bool {
	_, ok := m.clearedFields[user.FieldAPIKey]
	return ok
}

// ResetAPIKey resets all changes to the "api_key" field.
func (m *UserMutation) ResetAPIKey() {
	m.api_key = nil
	delete(m.clearedFields, user.FieldAPIKey)
}

// SetStatus sets the "status" field.
func (m *UserMutation) SetStatus(b bool) {
	m.status = &b
}

// Status returns the value of the "status" field in the mutation.
func (m *UserMutation) Status() (r bool, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldStatus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *UserMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[user.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *UserMutation) StatusCleared() bool {
	_, ok := m.clearedFields[user.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *UserMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, user.FieldStatus)
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.api_key != nil {
		fields = append(fields, user.FieldAPIKey)
	}
	if m.status != nil {
		fields = append(fields, user.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldEmail:
		return m.Email()
	case user.FieldAPIKey:
		return m.APIKey()
	case user.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldAPIKey:
		return m.OldAPIKey(ctx)
	case user.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldAPIKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAPIKey(v)
		return nil
	case user.FieldStatus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldAPIKey) {
		fields = append(fields, user.FieldAPIKey)
	}
	if m.FieldCleared(user.FieldStatus) {
		fields = append(fields, user.FieldStatus)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldAPIKey:
		m.ClearAPIKey()
		return nil
	case user.FieldStatus:
		m.ClearStatus()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldAPIKey:
		m.ResetAPIKey()
		return nil
	case user.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
