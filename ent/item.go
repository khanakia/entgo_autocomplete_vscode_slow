// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/khanakia/entautoslow/ent/item"
)

// Item is the model entity for the Item schema.
type Item struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TxTypeID holds the value of the "tx_type_id" field.
	TxTypeID int64 `json:"tx_type_id,omitempty"`
	// Sku holds the value of the "sku" field.
	Sku string `json:"sku,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// SubTitle holds the value of the "sub_title" field.
	SubTitle string `json:"sub_title,omitempty"`
	// StatusID holds the value of the "status_id" field.
	StatusID int64 `json:"status_id,omitempty"`
	// NoIndex holds the value of the "no_index" field.
	NoIndex bool `json:"no_index,omitempty"`
	// ItemCategoryID holds the value of the "item_category_id" field.
	ItemCategoryID int64 `json:"item_category_id,omitempty"`
	// BaseOnSalePrice holds the value of the "base_on_sale_price" field.
	BaseOnSalePrice bool `json:"base_on_sale_price,omitempty"`
	// RetailPrice holds the value of the "retail_price" field.
	RetailPrice float64 `json:"retail_price,omitempty"`
	// SalePrice holds the value of the "sale_price" field.
	SalePrice float64 `json:"sale_price,omitempty"`
	// ShippingProfileIDNum holds the value of the "shipping_profile_id_num" field.
	ShippingProfileIDNum int64 `json:"shipping_profile_id_num,omitempty"`
	// OptimizationIDNum holds the value of the "optimization_id_num" field.
	OptimizationIDNum int64 `json:"optimization_id_num,omitempty"`
	// Qty holds the value of the "qty" field.
	Qty int64 `json:"qty,omitempty"`
	// MaximumOrderQty holds the value of the "maximum_order_qty" field.
	MaximumOrderQty int64 `json:"maximum_order_qty,omitempty"`
	// PkgWidth holds the value of the "pkg_width" field.
	PkgWidth float64 `json:"pkg_width,omitempty"`
	// PkgHeight holds the value of the "pkg_height" field.
	PkgHeight float64 `json:"pkg_height,omitempty"`
	// PkgLength holds the value of the "pkg_length" field.
	PkgLength float64 `json:"pkg_length,omitempty"`
	// PkgWeight holds the value of the "pkg_weight" field.
	PkgWeight float64 `json:"pkg_weight,omitempty"`
	// ShortDesc holds the value of the "short_desc" field.
	ShortDesc string `json:"short_desc,omitempty"`
	// Descr holds the value of the "descr" field.
	Descr string `json:"descr,omitempty"`
	// ImageUrl1 holds the value of the "image_url1" field.
	ImageUrl1 string `json:"image_url1,omitempty"`
	// ImageUrl2 holds the value of the "image_url2" field.
	ImageUrl2 string `json:"image_url2,omitempty"`
	// ImageUrl3 holds the value of the "image_url3" field.
	ImageUrl3 string `json:"image_url3,omitempty"`
	// ImageUrl4 holds the value of the "image_url4" field.
	ImageUrl4 string `json:"image_url4,omitempty"`
	// ImageUrl5 holds the value of the "image_url5" field.
	ImageUrl5 string `json:"image_url5,omitempty"`
	// Condition holds the value of the "condition" field.
	Condition string `json:"condition,omitempty"`
	// Brand holds the value of the "brand" field.
	Brand string `json:"brand,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender string `json:"gender,omitempty"`
	// AgeGroup holds the value of the "age_group" field.
	AgeGroup string `json:"age_group,omitempty"`
	// Color holds the value of the "color" field.
	Color string `json:"color,omitempty"`
	// Size holds the value of the "size" field.
	Size string `json:"size,omitempty"`
	// UxmItemIDNum holds the value of the "uxm_item_id_num" field.
	UxmItemIDNum int64 `json:"uxm_item_id_num,omitempty"`
	// Sent holds the value of the "sent" field.
	Sent bool `json:"sent,omitempty"`
	// SentAt holds the value of the "sent_at" field.
	SentAt time.Time `json:"sent_at,omitempty"`
	// HasError holds the value of the "has_error" field.
	HasError bool `json:"has_error,omitempty"`
	// LastLogID holds the value of the "last_log_id" field.
	LastLogID int64 `json:"last_log_id,omitempty"`
	// FeedResponse holds the value of the "feed_response" field.
	FeedResponse string `json:"feed_response,omitempty"`
	// Keywords holds the value of the "keywords" field.
	Keywords string `json:"keywords,omitempty"`
	// Sync holds the value of the "sync" field.
	Sync bool `json:"sync,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// ShippingProfileID holds the value of the "shipping_profile_id" field.
	ShippingProfileID string `json:"shipping_profile_id,omitempty"`
	// OptimizationID holds the value of the "optimization_id" field.
	OptimizationID string `json:"optimization_id,omitempty"`
	// UxmItemID holds the value of the "uxm_item_id" field.
	UxmItemID string `json:"uxm_item_id,omitempty"`
	// ParentID holds the value of the "parent_id" field.
	ParentID string `json:"parent_id,omitempty"`
	// ItemTypeID holds the value of the "item_type_id" field.
	ItemTypeID string `json:"item_type_id,omitempty"`
	// UID holds the value of the "uid" field.
	UID string `json:"uid,omitempty"`
	// IsParent holds the value of the "is_parent" field.
	IsParent     bool `json:"is_parent,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Item) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case item.FieldNoIndex, item.FieldBaseOnSalePrice, item.FieldSent, item.FieldHasError, item.FieldSync, item.FieldIsParent:
			values[i] = new(sql.NullBool)
		case item.FieldRetailPrice, item.FieldSalePrice, item.FieldPkgWidth, item.FieldPkgHeight, item.FieldPkgLength, item.FieldPkgWeight:
			values[i] = new(sql.NullFloat64)
		case item.FieldID, item.FieldTxTypeID, item.FieldStatusID, item.FieldItemCategoryID, item.FieldShippingProfileIDNum, item.FieldOptimizationIDNum, item.FieldQty, item.FieldMaximumOrderQty, item.FieldUxmItemIDNum, item.FieldLastLogID:
			values[i] = new(sql.NullInt64)
		case item.FieldSku, item.FieldTitle, item.FieldSubTitle, item.FieldShortDesc, item.FieldDescr, item.FieldImageUrl1, item.FieldImageUrl2, item.FieldImageUrl3, item.FieldImageUrl4, item.FieldImageUrl5, item.FieldCondition, item.FieldBrand, item.FieldGender, item.FieldAgeGroup, item.FieldColor, item.FieldSize, item.FieldFeedResponse, item.FieldKeywords, item.FieldUserID, item.FieldShippingProfileID, item.FieldOptimizationID, item.FieldUxmItemID, item.FieldParentID, item.FieldItemTypeID, item.FieldUID:
			values[i] = new(sql.NullString)
		case item.FieldSentAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Item fields.
func (i *Item) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case item.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case item.FieldTxTypeID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tx_type_id", values[j])
			} else if value.Valid {
				i.TxTypeID = value.Int64
			}
		case item.FieldSku:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sku", values[j])
			} else if value.Valid {
				i.Sku = value.String
			}
		case item.FieldTitle:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[j])
			} else if value.Valid {
				i.Title = value.String
			}
		case item.FieldSubTitle:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sub_title", values[j])
			} else if value.Valid {
				i.SubTitle = value.String
			}
		case item.FieldStatusID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status_id", values[j])
			} else if value.Valid {
				i.StatusID = value.Int64
			}
		case item.FieldNoIndex:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field no_index", values[j])
			} else if value.Valid {
				i.NoIndex = value.Bool
			}
		case item.FieldItemCategoryID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field item_category_id", values[j])
			} else if value.Valid {
				i.ItemCategoryID = value.Int64
			}
		case item.FieldBaseOnSalePrice:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field base_on_sale_price", values[j])
			} else if value.Valid {
				i.BaseOnSalePrice = value.Bool
			}
		case item.FieldRetailPrice:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field retail_price", values[j])
			} else if value.Valid {
				i.RetailPrice = value.Float64
			}
		case item.FieldSalePrice:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field sale_price", values[j])
			} else if value.Valid {
				i.SalePrice = value.Float64
			}
		case item.FieldShippingProfileIDNum:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_profile_id_num", values[j])
			} else if value.Valid {
				i.ShippingProfileIDNum = value.Int64
			}
		case item.FieldOptimizationIDNum:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field optimization_id_num", values[j])
			} else if value.Valid {
				i.OptimizationIDNum = value.Int64
			}
		case item.FieldQty:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field qty", values[j])
			} else if value.Valid {
				i.Qty = value.Int64
			}
		case item.FieldMaximumOrderQty:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maximum_order_qty", values[j])
			} else if value.Valid {
				i.MaximumOrderQty = value.Int64
			}
		case item.FieldPkgWidth:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field pkg_width", values[j])
			} else if value.Valid {
				i.PkgWidth = value.Float64
			}
		case item.FieldPkgHeight:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field pkg_height", values[j])
			} else if value.Valid {
				i.PkgHeight = value.Float64
			}
		case item.FieldPkgLength:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field pkg_length", values[j])
			} else if value.Valid {
				i.PkgLength = value.Float64
			}
		case item.FieldPkgWeight:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field pkg_weight", values[j])
			} else if value.Valid {
				i.PkgWeight = value.Float64
			}
		case item.FieldShortDesc:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short_desc", values[j])
			} else if value.Valid {
				i.ShortDesc = value.String
			}
		case item.FieldDescr:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field descr", values[j])
			} else if value.Valid {
				i.Descr = value.String
			}
		case item.FieldImageUrl1:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url1", values[j])
			} else if value.Valid {
				i.ImageUrl1 = value.String
			}
		case item.FieldImageUrl2:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url2", values[j])
			} else if value.Valid {
				i.ImageUrl2 = value.String
			}
		case item.FieldImageUrl3:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url3", values[j])
			} else if value.Valid {
				i.ImageUrl3 = value.String
			}
		case item.FieldImageUrl4:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url4", values[j])
			} else if value.Valid {
				i.ImageUrl4 = value.String
			}
		case item.FieldImageUrl5:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url5", values[j])
			} else if value.Valid {
				i.ImageUrl5 = value.String
			}
		case item.FieldCondition:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field condition", values[j])
			} else if value.Valid {
				i.Condition = value.String
			}
		case item.FieldBrand:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field brand", values[j])
			} else if value.Valid {
				i.Brand = value.String
			}
		case item.FieldGender:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[j])
			} else if value.Valid {
				i.Gender = value.String
			}
		case item.FieldAgeGroup:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field age_group", values[j])
			} else if value.Valid {
				i.AgeGroup = value.String
			}
		case item.FieldColor:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[j])
			} else if value.Valid {
				i.Color = value.String
			}
		case item.FieldSize:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[j])
			} else if value.Valid {
				i.Size = value.String
			}
		case item.FieldUxmItemIDNum:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uxm_item_id_num", values[j])
			} else if value.Valid {
				i.UxmItemIDNum = value.Int64
			}
		case item.FieldSent:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field sent", values[j])
			} else if value.Valid {
				i.Sent = value.Bool
			}
		case item.FieldSentAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sent_at", values[j])
			} else if value.Valid {
				i.SentAt = value.Time
			}
		case item.FieldHasError:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_error", values[j])
			} else if value.Valid {
				i.HasError = value.Bool
			}
		case item.FieldLastLogID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_log_id", values[j])
			} else if value.Valid {
				i.LastLogID = value.Int64
			}
		case item.FieldFeedResponse:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field feed_response", values[j])
			} else if value.Valid {
				i.FeedResponse = value.String
			}
		case item.FieldKeywords:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field keywords", values[j])
			} else if value.Valid {
				i.Keywords = value.String
			}
		case item.FieldSync:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field sync", values[j])
			} else if value.Valid {
				i.Sync = value.Bool
			}
		case item.FieldUserID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[j])
			} else if value.Valid {
				i.UserID = value.String
			}
		case item.FieldShippingProfileID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_profile_id", values[j])
			} else if value.Valid {
				i.ShippingProfileID = value.String
			}
		case item.FieldOptimizationID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field optimization_id", values[j])
			} else if value.Valid {
				i.OptimizationID = value.String
			}
		case item.FieldUxmItemID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uxm_item_id", values[j])
			} else if value.Valid {
				i.UxmItemID = value.String
			}
		case item.FieldParentID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[j])
			} else if value.Valid {
				i.ParentID = value.String
			}
		case item.FieldItemTypeID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field item_type_id", values[j])
			} else if value.Valid {
				i.ItemTypeID = value.String
			}
		case item.FieldUID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[j])
			} else if value.Valid {
				i.UID = value.String
			}
		case item.FieldIsParent:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_parent", values[j])
			} else if value.Valid {
				i.IsParent = value.Bool
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Item.
// This includes values selected through modifiers, order, etc.
func (i *Item) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// Update returns a builder for updating this Item.
// Note that you need to call Item.Unwrap() before calling this method if this Item
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Item) Update() *ItemUpdateOne {
	return NewItemClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Item entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Item) Unwrap() *Item {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Item is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Item) String() string {
	var builder strings.Builder
	builder.WriteString("Item(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("tx_type_id=")
	builder.WriteString(fmt.Sprintf("%v", i.TxTypeID))
	builder.WriteString(", ")
	builder.WriteString("sku=")
	builder.WriteString(i.Sku)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(i.Title)
	builder.WriteString(", ")
	builder.WriteString("sub_title=")
	builder.WriteString(i.SubTitle)
	builder.WriteString(", ")
	builder.WriteString("status_id=")
	builder.WriteString(fmt.Sprintf("%v", i.StatusID))
	builder.WriteString(", ")
	builder.WriteString("no_index=")
	builder.WriteString(fmt.Sprintf("%v", i.NoIndex))
	builder.WriteString(", ")
	builder.WriteString("item_category_id=")
	builder.WriteString(fmt.Sprintf("%v", i.ItemCategoryID))
	builder.WriteString(", ")
	builder.WriteString("base_on_sale_price=")
	builder.WriteString(fmt.Sprintf("%v", i.BaseOnSalePrice))
	builder.WriteString(", ")
	builder.WriteString("retail_price=")
	builder.WriteString(fmt.Sprintf("%v", i.RetailPrice))
	builder.WriteString(", ")
	builder.WriteString("sale_price=")
	builder.WriteString(fmt.Sprintf("%v", i.SalePrice))
	builder.WriteString(", ")
	builder.WriteString("shipping_profile_id_num=")
	builder.WriteString(fmt.Sprintf("%v", i.ShippingProfileIDNum))
	builder.WriteString(", ")
	builder.WriteString("optimization_id_num=")
	builder.WriteString(fmt.Sprintf("%v", i.OptimizationIDNum))
	builder.WriteString(", ")
	builder.WriteString("qty=")
	builder.WriteString(fmt.Sprintf("%v", i.Qty))
	builder.WriteString(", ")
	builder.WriteString("maximum_order_qty=")
	builder.WriteString(fmt.Sprintf("%v", i.MaximumOrderQty))
	builder.WriteString(", ")
	builder.WriteString("pkg_width=")
	builder.WriteString(fmt.Sprintf("%v", i.PkgWidth))
	builder.WriteString(", ")
	builder.WriteString("pkg_height=")
	builder.WriteString(fmt.Sprintf("%v", i.PkgHeight))
	builder.WriteString(", ")
	builder.WriteString("pkg_length=")
	builder.WriteString(fmt.Sprintf("%v", i.PkgLength))
	builder.WriteString(", ")
	builder.WriteString("pkg_weight=")
	builder.WriteString(fmt.Sprintf("%v", i.PkgWeight))
	builder.WriteString(", ")
	builder.WriteString("short_desc=")
	builder.WriteString(i.ShortDesc)
	builder.WriteString(", ")
	builder.WriteString("descr=")
	builder.WriteString(i.Descr)
	builder.WriteString(", ")
	builder.WriteString("image_url1=")
	builder.WriteString(i.ImageUrl1)
	builder.WriteString(", ")
	builder.WriteString("image_url2=")
	builder.WriteString(i.ImageUrl2)
	builder.WriteString(", ")
	builder.WriteString("image_url3=")
	builder.WriteString(i.ImageUrl3)
	builder.WriteString(", ")
	builder.WriteString("image_url4=")
	builder.WriteString(i.ImageUrl4)
	builder.WriteString(", ")
	builder.WriteString("image_url5=")
	builder.WriteString(i.ImageUrl5)
	builder.WriteString(", ")
	builder.WriteString("condition=")
	builder.WriteString(i.Condition)
	builder.WriteString(", ")
	builder.WriteString("brand=")
	builder.WriteString(i.Brand)
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(i.Gender)
	builder.WriteString(", ")
	builder.WriteString("age_group=")
	builder.WriteString(i.AgeGroup)
	builder.WriteString(", ")
	builder.WriteString("color=")
	builder.WriteString(i.Color)
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(i.Size)
	builder.WriteString(", ")
	builder.WriteString("uxm_item_id_num=")
	builder.WriteString(fmt.Sprintf("%v", i.UxmItemIDNum))
	builder.WriteString(", ")
	builder.WriteString("sent=")
	builder.WriteString(fmt.Sprintf("%v", i.Sent))
	builder.WriteString(", ")
	builder.WriteString("sent_at=")
	builder.WriteString(i.SentAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("has_error=")
	builder.WriteString(fmt.Sprintf("%v", i.HasError))
	builder.WriteString(", ")
	builder.WriteString("last_log_id=")
	builder.WriteString(fmt.Sprintf("%v", i.LastLogID))
	builder.WriteString(", ")
	builder.WriteString("feed_response=")
	builder.WriteString(i.FeedResponse)
	builder.WriteString(", ")
	builder.WriteString("keywords=")
	builder.WriteString(i.Keywords)
	builder.WriteString(", ")
	builder.WriteString("sync=")
	builder.WriteString(fmt.Sprintf("%v", i.Sync))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(i.UserID)
	builder.WriteString(", ")
	builder.WriteString("shipping_profile_id=")
	builder.WriteString(i.ShippingProfileID)
	builder.WriteString(", ")
	builder.WriteString("optimization_id=")
	builder.WriteString(i.OptimizationID)
	builder.WriteString(", ")
	builder.WriteString("uxm_item_id=")
	builder.WriteString(i.UxmItemID)
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(i.ParentID)
	builder.WriteString(", ")
	builder.WriteString("item_type_id=")
	builder.WriteString(i.ItemTypeID)
	builder.WriteString(", ")
	builder.WriteString("uid=")
	builder.WriteString(i.UID)
	builder.WriteString(", ")
	builder.WriteString("is_parent=")
	builder.WriteString(fmt.Sprintf("%v", i.IsParent))
	builder.WriteByte(')')
	return builder.String()
}

// Items is a parsable slice of Item.
type Items []*Item
