// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/khanakia/entautoslow/ent/item"
	"github.com/khanakia/entautoslow/ent/predicate"
)

// ItemUpdate is the builder for updating Item entities.
type ItemUpdate struct {
	config
	hooks    []Hook
	mutation *ItemMutation
}

// Where appends a list predicates to the ItemUpdate builder.
func (iu *ItemUpdate) Where(ps ...predicate.Item) *ItemUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetTxTypeID sets the "tx_type_id" field.
func (iu *ItemUpdate) SetTxTypeID(i int64) *ItemUpdate {
	iu.mutation.ResetTxTypeID()
	iu.mutation.SetTxTypeID(i)
	return iu
}

// SetNillableTxTypeID sets the "tx_type_id" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableTxTypeID(i *int64) *ItemUpdate {
	if i != nil {
		iu.SetTxTypeID(*i)
	}
	return iu
}

// AddTxTypeID adds i to the "tx_type_id" field.
func (iu *ItemUpdate) AddTxTypeID(i int64) *ItemUpdate {
	iu.mutation.AddTxTypeID(i)
	return iu
}

// ClearTxTypeID clears the value of the "tx_type_id" field.
func (iu *ItemUpdate) ClearTxTypeID() *ItemUpdate {
	iu.mutation.ClearTxTypeID()
	return iu
}

// SetSku sets the "sku" field.
func (iu *ItemUpdate) SetSku(s string) *ItemUpdate {
	iu.mutation.SetSku(s)
	return iu
}

// SetNillableSku sets the "sku" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableSku(s *string) *ItemUpdate {
	if s != nil {
		iu.SetSku(*s)
	}
	return iu
}

// ClearSku clears the value of the "sku" field.
func (iu *ItemUpdate) ClearSku() *ItemUpdate {
	iu.mutation.ClearSku()
	return iu
}

// SetTitle sets the "title" field.
func (iu *ItemUpdate) SetTitle(s string) *ItemUpdate {
	iu.mutation.SetTitle(s)
	return iu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableTitle(s *string) *ItemUpdate {
	if s != nil {
		iu.SetTitle(*s)
	}
	return iu
}

// ClearTitle clears the value of the "title" field.
func (iu *ItemUpdate) ClearTitle() *ItemUpdate {
	iu.mutation.ClearTitle()
	return iu
}

// SetSubTitle sets the "sub_title" field.
func (iu *ItemUpdate) SetSubTitle(s string) *ItemUpdate {
	iu.mutation.SetSubTitle(s)
	return iu
}

// SetNillableSubTitle sets the "sub_title" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableSubTitle(s *string) *ItemUpdate {
	if s != nil {
		iu.SetSubTitle(*s)
	}
	return iu
}

// ClearSubTitle clears the value of the "sub_title" field.
func (iu *ItemUpdate) ClearSubTitle() *ItemUpdate {
	iu.mutation.ClearSubTitle()
	return iu
}

// SetStatusID sets the "status_id" field.
func (iu *ItemUpdate) SetStatusID(i int64) *ItemUpdate {
	iu.mutation.ResetStatusID()
	iu.mutation.SetStatusID(i)
	return iu
}

// SetNillableStatusID sets the "status_id" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableStatusID(i *int64) *ItemUpdate {
	if i != nil {
		iu.SetStatusID(*i)
	}
	return iu
}

// AddStatusID adds i to the "status_id" field.
func (iu *ItemUpdate) AddStatusID(i int64) *ItemUpdate {
	iu.mutation.AddStatusID(i)
	return iu
}

// ClearStatusID clears the value of the "status_id" field.
func (iu *ItemUpdate) ClearStatusID() *ItemUpdate {
	iu.mutation.ClearStatusID()
	return iu
}

// SetNoIndex sets the "no_index" field.
func (iu *ItemUpdate) SetNoIndex(b bool) *ItemUpdate {
	iu.mutation.SetNoIndex(b)
	return iu
}

// SetNillableNoIndex sets the "no_index" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableNoIndex(b *bool) *ItemUpdate {
	if b != nil {
		iu.SetNoIndex(*b)
	}
	return iu
}

// ClearNoIndex clears the value of the "no_index" field.
func (iu *ItemUpdate) ClearNoIndex() *ItemUpdate {
	iu.mutation.ClearNoIndex()
	return iu
}

// SetItemCategoryID sets the "item_category_id" field.
func (iu *ItemUpdate) SetItemCategoryID(i int64) *ItemUpdate {
	iu.mutation.ResetItemCategoryID()
	iu.mutation.SetItemCategoryID(i)
	return iu
}

// SetNillableItemCategoryID sets the "item_category_id" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableItemCategoryID(i *int64) *ItemUpdate {
	if i != nil {
		iu.SetItemCategoryID(*i)
	}
	return iu
}

// AddItemCategoryID adds i to the "item_category_id" field.
func (iu *ItemUpdate) AddItemCategoryID(i int64) *ItemUpdate {
	iu.mutation.AddItemCategoryID(i)
	return iu
}

// ClearItemCategoryID clears the value of the "item_category_id" field.
func (iu *ItemUpdate) ClearItemCategoryID() *ItemUpdate {
	iu.mutation.ClearItemCategoryID()
	return iu
}

// SetBaseOnSalePrice sets the "base_on_sale_price" field.
func (iu *ItemUpdate) SetBaseOnSalePrice(b bool) *ItemUpdate {
	iu.mutation.SetBaseOnSalePrice(b)
	return iu
}

// SetNillableBaseOnSalePrice sets the "base_on_sale_price" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableBaseOnSalePrice(b *bool) *ItemUpdate {
	if b != nil {
		iu.SetBaseOnSalePrice(*b)
	}
	return iu
}

// ClearBaseOnSalePrice clears the value of the "base_on_sale_price" field.
func (iu *ItemUpdate) ClearBaseOnSalePrice() *ItemUpdate {
	iu.mutation.ClearBaseOnSalePrice()
	return iu
}

// SetRetailPrice sets the "retail_price" field.
func (iu *ItemUpdate) SetRetailPrice(f float64) *ItemUpdate {
	iu.mutation.ResetRetailPrice()
	iu.mutation.SetRetailPrice(f)
	return iu
}

// SetNillableRetailPrice sets the "retail_price" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableRetailPrice(f *float64) *ItemUpdate {
	if f != nil {
		iu.SetRetailPrice(*f)
	}
	return iu
}

// AddRetailPrice adds f to the "retail_price" field.
func (iu *ItemUpdate) AddRetailPrice(f float64) *ItemUpdate {
	iu.mutation.AddRetailPrice(f)
	return iu
}

// ClearRetailPrice clears the value of the "retail_price" field.
func (iu *ItemUpdate) ClearRetailPrice() *ItemUpdate {
	iu.mutation.ClearRetailPrice()
	return iu
}

// SetSalePrice sets the "sale_price" field.
func (iu *ItemUpdate) SetSalePrice(f float64) *ItemUpdate {
	iu.mutation.ResetSalePrice()
	iu.mutation.SetSalePrice(f)
	return iu
}

// SetNillableSalePrice sets the "sale_price" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableSalePrice(f *float64) *ItemUpdate {
	if f != nil {
		iu.SetSalePrice(*f)
	}
	return iu
}

// AddSalePrice adds f to the "sale_price" field.
func (iu *ItemUpdate) AddSalePrice(f float64) *ItemUpdate {
	iu.mutation.AddSalePrice(f)
	return iu
}

// ClearSalePrice clears the value of the "sale_price" field.
func (iu *ItemUpdate) ClearSalePrice() *ItemUpdate {
	iu.mutation.ClearSalePrice()
	return iu
}

// SetShippingProfileIDNum sets the "shipping_profile_id_num" field.
func (iu *ItemUpdate) SetShippingProfileIDNum(i int64) *ItemUpdate {
	iu.mutation.ResetShippingProfileIDNum()
	iu.mutation.SetShippingProfileIDNum(i)
	return iu
}

// SetNillableShippingProfileIDNum sets the "shipping_profile_id_num" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableShippingProfileIDNum(i *int64) *ItemUpdate {
	if i != nil {
		iu.SetShippingProfileIDNum(*i)
	}
	return iu
}

// AddShippingProfileIDNum adds i to the "shipping_profile_id_num" field.
func (iu *ItemUpdate) AddShippingProfileIDNum(i int64) *ItemUpdate {
	iu.mutation.AddShippingProfileIDNum(i)
	return iu
}

// ClearShippingProfileIDNum clears the value of the "shipping_profile_id_num" field.
func (iu *ItemUpdate) ClearShippingProfileIDNum() *ItemUpdate {
	iu.mutation.ClearShippingProfileIDNum()
	return iu
}

// SetOptimizationIDNum sets the "optimization_id_num" field.
func (iu *ItemUpdate) SetOptimizationIDNum(i int64) *ItemUpdate {
	iu.mutation.ResetOptimizationIDNum()
	iu.mutation.SetOptimizationIDNum(i)
	return iu
}

// SetNillableOptimizationIDNum sets the "optimization_id_num" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableOptimizationIDNum(i *int64) *ItemUpdate {
	if i != nil {
		iu.SetOptimizationIDNum(*i)
	}
	return iu
}

// AddOptimizationIDNum adds i to the "optimization_id_num" field.
func (iu *ItemUpdate) AddOptimizationIDNum(i int64) *ItemUpdate {
	iu.mutation.AddOptimizationIDNum(i)
	return iu
}

// ClearOptimizationIDNum clears the value of the "optimization_id_num" field.
func (iu *ItemUpdate) ClearOptimizationIDNum() *ItemUpdate {
	iu.mutation.ClearOptimizationIDNum()
	return iu
}

// SetQty sets the "qty" field.
func (iu *ItemUpdate) SetQty(i int64) *ItemUpdate {
	iu.mutation.ResetQty()
	iu.mutation.SetQty(i)
	return iu
}

// SetNillableQty sets the "qty" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableQty(i *int64) *ItemUpdate {
	if i != nil {
		iu.SetQty(*i)
	}
	return iu
}

// AddQty adds i to the "qty" field.
func (iu *ItemUpdate) AddQty(i int64) *ItemUpdate {
	iu.mutation.AddQty(i)
	return iu
}

// ClearQty clears the value of the "qty" field.
func (iu *ItemUpdate) ClearQty() *ItemUpdate {
	iu.mutation.ClearQty()
	return iu
}

// SetMaximumOrderQty sets the "maximum_order_qty" field.
func (iu *ItemUpdate) SetMaximumOrderQty(i int64) *ItemUpdate {
	iu.mutation.ResetMaximumOrderQty()
	iu.mutation.SetMaximumOrderQty(i)
	return iu
}

// SetNillableMaximumOrderQty sets the "maximum_order_qty" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableMaximumOrderQty(i *int64) *ItemUpdate {
	if i != nil {
		iu.SetMaximumOrderQty(*i)
	}
	return iu
}

// AddMaximumOrderQty adds i to the "maximum_order_qty" field.
func (iu *ItemUpdate) AddMaximumOrderQty(i int64) *ItemUpdate {
	iu.mutation.AddMaximumOrderQty(i)
	return iu
}

// ClearMaximumOrderQty clears the value of the "maximum_order_qty" field.
func (iu *ItemUpdate) ClearMaximumOrderQty() *ItemUpdate {
	iu.mutation.ClearMaximumOrderQty()
	return iu
}

// SetPkgWidth sets the "pkg_width" field.
func (iu *ItemUpdate) SetPkgWidth(f float64) *ItemUpdate {
	iu.mutation.ResetPkgWidth()
	iu.mutation.SetPkgWidth(f)
	return iu
}

// SetNillablePkgWidth sets the "pkg_width" field if the given value is not nil.
func (iu *ItemUpdate) SetNillablePkgWidth(f *float64) *ItemUpdate {
	if f != nil {
		iu.SetPkgWidth(*f)
	}
	return iu
}

// AddPkgWidth adds f to the "pkg_width" field.
func (iu *ItemUpdate) AddPkgWidth(f float64) *ItemUpdate {
	iu.mutation.AddPkgWidth(f)
	return iu
}

// ClearPkgWidth clears the value of the "pkg_width" field.
func (iu *ItemUpdate) ClearPkgWidth() *ItemUpdate {
	iu.mutation.ClearPkgWidth()
	return iu
}

// SetPkgHeight sets the "pkg_height" field.
func (iu *ItemUpdate) SetPkgHeight(f float64) *ItemUpdate {
	iu.mutation.ResetPkgHeight()
	iu.mutation.SetPkgHeight(f)
	return iu
}

// SetNillablePkgHeight sets the "pkg_height" field if the given value is not nil.
func (iu *ItemUpdate) SetNillablePkgHeight(f *float64) *ItemUpdate {
	if f != nil {
		iu.SetPkgHeight(*f)
	}
	return iu
}

// AddPkgHeight adds f to the "pkg_height" field.
func (iu *ItemUpdate) AddPkgHeight(f float64) *ItemUpdate {
	iu.mutation.AddPkgHeight(f)
	return iu
}

// ClearPkgHeight clears the value of the "pkg_height" field.
func (iu *ItemUpdate) ClearPkgHeight() *ItemUpdate {
	iu.mutation.ClearPkgHeight()
	return iu
}

// SetPkgLength sets the "pkg_length" field.
func (iu *ItemUpdate) SetPkgLength(f float64) *ItemUpdate {
	iu.mutation.ResetPkgLength()
	iu.mutation.SetPkgLength(f)
	return iu
}

// SetNillablePkgLength sets the "pkg_length" field if the given value is not nil.
func (iu *ItemUpdate) SetNillablePkgLength(f *float64) *ItemUpdate {
	if f != nil {
		iu.SetPkgLength(*f)
	}
	return iu
}

// AddPkgLength adds f to the "pkg_length" field.
func (iu *ItemUpdate) AddPkgLength(f float64) *ItemUpdate {
	iu.mutation.AddPkgLength(f)
	return iu
}

// ClearPkgLength clears the value of the "pkg_length" field.
func (iu *ItemUpdate) ClearPkgLength() *ItemUpdate {
	iu.mutation.ClearPkgLength()
	return iu
}

// SetPkgWeight sets the "pkg_weight" field.
func (iu *ItemUpdate) SetPkgWeight(f float64) *ItemUpdate {
	iu.mutation.ResetPkgWeight()
	iu.mutation.SetPkgWeight(f)
	return iu
}

// SetNillablePkgWeight sets the "pkg_weight" field if the given value is not nil.
func (iu *ItemUpdate) SetNillablePkgWeight(f *float64) *ItemUpdate {
	if f != nil {
		iu.SetPkgWeight(*f)
	}
	return iu
}

// AddPkgWeight adds f to the "pkg_weight" field.
func (iu *ItemUpdate) AddPkgWeight(f float64) *ItemUpdate {
	iu.mutation.AddPkgWeight(f)
	return iu
}

// ClearPkgWeight clears the value of the "pkg_weight" field.
func (iu *ItemUpdate) ClearPkgWeight() *ItemUpdate {
	iu.mutation.ClearPkgWeight()
	return iu
}

// SetShortDesc sets the "short_desc" field.
func (iu *ItemUpdate) SetShortDesc(s string) *ItemUpdate {
	iu.mutation.SetShortDesc(s)
	return iu
}

// SetNillableShortDesc sets the "short_desc" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableShortDesc(s *string) *ItemUpdate {
	if s != nil {
		iu.SetShortDesc(*s)
	}
	return iu
}

// ClearShortDesc clears the value of the "short_desc" field.
func (iu *ItemUpdate) ClearShortDesc() *ItemUpdate {
	iu.mutation.ClearShortDesc()
	return iu
}

// SetDescr sets the "descr" field.
func (iu *ItemUpdate) SetDescr(s string) *ItemUpdate {
	iu.mutation.SetDescr(s)
	return iu
}

// SetNillableDescr sets the "descr" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableDescr(s *string) *ItemUpdate {
	if s != nil {
		iu.SetDescr(*s)
	}
	return iu
}

// ClearDescr clears the value of the "descr" field.
func (iu *ItemUpdate) ClearDescr() *ItemUpdate {
	iu.mutation.ClearDescr()
	return iu
}

// SetImageUrl1 sets the "image_url1" field.
func (iu *ItemUpdate) SetImageUrl1(s string) *ItemUpdate {
	iu.mutation.SetImageUrl1(s)
	return iu
}

// SetNillableImageUrl1 sets the "image_url1" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableImageUrl1(s *string) *ItemUpdate {
	if s != nil {
		iu.SetImageUrl1(*s)
	}
	return iu
}

// ClearImageUrl1 clears the value of the "image_url1" field.
func (iu *ItemUpdate) ClearImageUrl1() *ItemUpdate {
	iu.mutation.ClearImageUrl1()
	return iu
}

// SetImageUrl2 sets the "image_url2" field.
func (iu *ItemUpdate) SetImageUrl2(s string) *ItemUpdate {
	iu.mutation.SetImageUrl2(s)
	return iu
}

// SetNillableImageUrl2 sets the "image_url2" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableImageUrl2(s *string) *ItemUpdate {
	if s != nil {
		iu.SetImageUrl2(*s)
	}
	return iu
}

// ClearImageUrl2 clears the value of the "image_url2" field.
func (iu *ItemUpdate) ClearImageUrl2() *ItemUpdate {
	iu.mutation.ClearImageUrl2()
	return iu
}

// SetImageUrl3 sets the "image_url3" field.
func (iu *ItemUpdate) SetImageUrl3(s string) *ItemUpdate {
	iu.mutation.SetImageUrl3(s)
	return iu
}

// SetNillableImageUrl3 sets the "image_url3" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableImageUrl3(s *string) *ItemUpdate {
	if s != nil {
		iu.SetImageUrl3(*s)
	}
	return iu
}

// ClearImageUrl3 clears the value of the "image_url3" field.
func (iu *ItemUpdate) ClearImageUrl3() *ItemUpdate {
	iu.mutation.ClearImageUrl3()
	return iu
}

// SetImageUrl4 sets the "image_url4" field.
func (iu *ItemUpdate) SetImageUrl4(s string) *ItemUpdate {
	iu.mutation.SetImageUrl4(s)
	return iu
}

// SetNillableImageUrl4 sets the "image_url4" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableImageUrl4(s *string) *ItemUpdate {
	if s != nil {
		iu.SetImageUrl4(*s)
	}
	return iu
}

// ClearImageUrl4 clears the value of the "image_url4" field.
func (iu *ItemUpdate) ClearImageUrl4() *ItemUpdate {
	iu.mutation.ClearImageUrl4()
	return iu
}

// SetImageUrl5 sets the "image_url5" field.
func (iu *ItemUpdate) SetImageUrl5(s string) *ItemUpdate {
	iu.mutation.SetImageUrl5(s)
	return iu
}

// SetNillableImageUrl5 sets the "image_url5" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableImageUrl5(s *string) *ItemUpdate {
	if s != nil {
		iu.SetImageUrl5(*s)
	}
	return iu
}

// ClearImageUrl5 clears the value of the "image_url5" field.
func (iu *ItemUpdate) ClearImageUrl5() *ItemUpdate {
	iu.mutation.ClearImageUrl5()
	return iu
}

// SetCondition sets the "condition" field.
func (iu *ItemUpdate) SetCondition(s string) *ItemUpdate {
	iu.mutation.SetCondition(s)
	return iu
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableCondition(s *string) *ItemUpdate {
	if s != nil {
		iu.SetCondition(*s)
	}
	return iu
}

// ClearCondition clears the value of the "condition" field.
func (iu *ItemUpdate) ClearCondition() *ItemUpdate {
	iu.mutation.ClearCondition()
	return iu
}

// SetBrand sets the "brand" field.
func (iu *ItemUpdate) SetBrand(s string) *ItemUpdate {
	iu.mutation.SetBrand(s)
	return iu
}

// SetNillableBrand sets the "brand" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableBrand(s *string) *ItemUpdate {
	if s != nil {
		iu.SetBrand(*s)
	}
	return iu
}

// ClearBrand clears the value of the "brand" field.
func (iu *ItemUpdate) ClearBrand() *ItemUpdate {
	iu.mutation.ClearBrand()
	return iu
}

// SetGender sets the "gender" field.
func (iu *ItemUpdate) SetGender(s string) *ItemUpdate {
	iu.mutation.SetGender(s)
	return iu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableGender(s *string) *ItemUpdate {
	if s != nil {
		iu.SetGender(*s)
	}
	return iu
}

// ClearGender clears the value of the "gender" field.
func (iu *ItemUpdate) ClearGender() *ItemUpdate {
	iu.mutation.ClearGender()
	return iu
}

// SetAgeGroup sets the "age_group" field.
func (iu *ItemUpdate) SetAgeGroup(s string) *ItemUpdate {
	iu.mutation.SetAgeGroup(s)
	return iu
}

// SetNillableAgeGroup sets the "age_group" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableAgeGroup(s *string) *ItemUpdate {
	if s != nil {
		iu.SetAgeGroup(*s)
	}
	return iu
}

// ClearAgeGroup clears the value of the "age_group" field.
func (iu *ItemUpdate) ClearAgeGroup() *ItemUpdate {
	iu.mutation.ClearAgeGroup()
	return iu
}

// SetColor sets the "color" field.
func (iu *ItemUpdate) SetColor(s string) *ItemUpdate {
	iu.mutation.SetColor(s)
	return iu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableColor(s *string) *ItemUpdate {
	if s != nil {
		iu.SetColor(*s)
	}
	return iu
}

// ClearColor clears the value of the "color" field.
func (iu *ItemUpdate) ClearColor() *ItemUpdate {
	iu.mutation.ClearColor()
	return iu
}

// SetSize sets the "size" field.
func (iu *ItemUpdate) SetSize(s string) *ItemUpdate {
	iu.mutation.SetSize(s)
	return iu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableSize(s *string) *ItemUpdate {
	if s != nil {
		iu.SetSize(*s)
	}
	return iu
}

// ClearSize clears the value of the "size" field.
func (iu *ItemUpdate) ClearSize() *ItemUpdate {
	iu.mutation.ClearSize()
	return iu
}

// SetUxmItemIDNum sets the "uxm_item_id_num" field.
func (iu *ItemUpdate) SetUxmItemIDNum(i int64) *ItemUpdate {
	iu.mutation.ResetUxmItemIDNum()
	iu.mutation.SetUxmItemIDNum(i)
	return iu
}

// SetNillableUxmItemIDNum sets the "uxm_item_id_num" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableUxmItemIDNum(i *int64) *ItemUpdate {
	if i != nil {
		iu.SetUxmItemIDNum(*i)
	}
	return iu
}

// AddUxmItemIDNum adds i to the "uxm_item_id_num" field.
func (iu *ItemUpdate) AddUxmItemIDNum(i int64) *ItemUpdate {
	iu.mutation.AddUxmItemIDNum(i)
	return iu
}

// ClearUxmItemIDNum clears the value of the "uxm_item_id_num" field.
func (iu *ItemUpdate) ClearUxmItemIDNum() *ItemUpdate {
	iu.mutation.ClearUxmItemIDNum()
	return iu
}

// SetSent sets the "sent" field.
func (iu *ItemUpdate) SetSent(b bool) *ItemUpdate {
	iu.mutation.SetSent(b)
	return iu
}

// SetNillableSent sets the "sent" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableSent(b *bool) *ItemUpdate {
	if b != nil {
		iu.SetSent(*b)
	}
	return iu
}

// ClearSent clears the value of the "sent" field.
func (iu *ItemUpdate) ClearSent() *ItemUpdate {
	iu.mutation.ClearSent()
	return iu
}

// SetSentAt sets the "sent_at" field.
func (iu *ItemUpdate) SetSentAt(t time.Time) *ItemUpdate {
	iu.mutation.SetSentAt(t)
	return iu
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableSentAt(t *time.Time) *ItemUpdate {
	if t != nil {
		iu.SetSentAt(*t)
	}
	return iu
}

// ClearSentAt clears the value of the "sent_at" field.
func (iu *ItemUpdate) ClearSentAt() *ItemUpdate {
	iu.mutation.ClearSentAt()
	return iu
}

// SetHasError sets the "has_error" field.
func (iu *ItemUpdate) SetHasError(b bool) *ItemUpdate {
	iu.mutation.SetHasError(b)
	return iu
}

// SetNillableHasError sets the "has_error" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableHasError(b *bool) *ItemUpdate {
	if b != nil {
		iu.SetHasError(*b)
	}
	return iu
}

// ClearHasError clears the value of the "has_error" field.
func (iu *ItemUpdate) ClearHasError() *ItemUpdate {
	iu.mutation.ClearHasError()
	return iu
}

// SetLastLogID sets the "last_log_id" field.
func (iu *ItemUpdate) SetLastLogID(i int64) *ItemUpdate {
	iu.mutation.ResetLastLogID()
	iu.mutation.SetLastLogID(i)
	return iu
}

// SetNillableLastLogID sets the "last_log_id" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableLastLogID(i *int64) *ItemUpdate {
	if i != nil {
		iu.SetLastLogID(*i)
	}
	return iu
}

// AddLastLogID adds i to the "last_log_id" field.
func (iu *ItemUpdate) AddLastLogID(i int64) *ItemUpdate {
	iu.mutation.AddLastLogID(i)
	return iu
}

// ClearLastLogID clears the value of the "last_log_id" field.
func (iu *ItemUpdate) ClearLastLogID() *ItemUpdate {
	iu.mutation.ClearLastLogID()
	return iu
}

// SetFeedResponse sets the "feed_response" field.
func (iu *ItemUpdate) SetFeedResponse(s string) *ItemUpdate {
	iu.mutation.SetFeedResponse(s)
	return iu
}

// SetNillableFeedResponse sets the "feed_response" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableFeedResponse(s *string) *ItemUpdate {
	if s != nil {
		iu.SetFeedResponse(*s)
	}
	return iu
}

// ClearFeedResponse clears the value of the "feed_response" field.
func (iu *ItemUpdate) ClearFeedResponse() *ItemUpdate {
	iu.mutation.ClearFeedResponse()
	return iu
}

// SetKeywords sets the "keywords" field.
func (iu *ItemUpdate) SetKeywords(s string) *ItemUpdate {
	iu.mutation.SetKeywords(s)
	return iu
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableKeywords(s *string) *ItemUpdate {
	if s != nil {
		iu.SetKeywords(*s)
	}
	return iu
}

// ClearKeywords clears the value of the "keywords" field.
func (iu *ItemUpdate) ClearKeywords() *ItemUpdate {
	iu.mutation.ClearKeywords()
	return iu
}

// SetSync sets the "sync" field.
func (iu *ItemUpdate) SetSync(b bool) *ItemUpdate {
	iu.mutation.SetSync(b)
	return iu
}

// SetNillableSync sets the "sync" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableSync(b *bool) *ItemUpdate {
	if b != nil {
		iu.SetSync(*b)
	}
	return iu
}

// ClearSync clears the value of the "sync" field.
func (iu *ItemUpdate) ClearSync() *ItemUpdate {
	iu.mutation.ClearSync()
	return iu
}

// SetUserID sets the "user_id" field.
func (iu *ItemUpdate) SetUserID(s string) *ItemUpdate {
	iu.mutation.SetUserID(s)
	return iu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableUserID(s *string) *ItemUpdate {
	if s != nil {
		iu.SetUserID(*s)
	}
	return iu
}

// ClearUserID clears the value of the "user_id" field.
func (iu *ItemUpdate) ClearUserID() *ItemUpdate {
	iu.mutation.ClearUserID()
	return iu
}

// SetShippingProfileID sets the "shipping_profile_id" field.
func (iu *ItemUpdate) SetShippingProfileID(s string) *ItemUpdate {
	iu.mutation.SetShippingProfileID(s)
	return iu
}

// SetNillableShippingProfileID sets the "shipping_profile_id" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableShippingProfileID(s *string) *ItemUpdate {
	if s != nil {
		iu.SetShippingProfileID(*s)
	}
	return iu
}

// ClearShippingProfileID clears the value of the "shipping_profile_id" field.
func (iu *ItemUpdate) ClearShippingProfileID() *ItemUpdate {
	iu.mutation.ClearShippingProfileID()
	return iu
}

// SetOptimizationID sets the "optimization_id" field.
func (iu *ItemUpdate) SetOptimizationID(s string) *ItemUpdate {
	iu.mutation.SetOptimizationID(s)
	return iu
}

// SetNillableOptimizationID sets the "optimization_id" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableOptimizationID(s *string) *ItemUpdate {
	if s != nil {
		iu.SetOptimizationID(*s)
	}
	return iu
}

// ClearOptimizationID clears the value of the "optimization_id" field.
func (iu *ItemUpdate) ClearOptimizationID() *ItemUpdate {
	iu.mutation.ClearOptimizationID()
	return iu
}

// SetUxmItemID sets the "uxm_item_id" field.
func (iu *ItemUpdate) SetUxmItemID(s string) *ItemUpdate {
	iu.mutation.SetUxmItemID(s)
	return iu
}

// SetNillableUxmItemID sets the "uxm_item_id" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableUxmItemID(s *string) *ItemUpdate {
	if s != nil {
		iu.SetUxmItemID(*s)
	}
	return iu
}

// ClearUxmItemID clears the value of the "uxm_item_id" field.
func (iu *ItemUpdate) ClearUxmItemID() *ItemUpdate {
	iu.mutation.ClearUxmItemID()
	return iu
}

// SetParentID sets the "parent_id" field.
func (iu *ItemUpdate) SetParentID(s string) *ItemUpdate {
	iu.mutation.SetParentID(s)
	return iu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableParentID(s *string) *ItemUpdate {
	if s != nil {
		iu.SetParentID(*s)
	}
	return iu
}

// ClearParentID clears the value of the "parent_id" field.
func (iu *ItemUpdate) ClearParentID() *ItemUpdate {
	iu.mutation.ClearParentID()
	return iu
}

// SetItemTypeID sets the "item_type_id" field.
func (iu *ItemUpdate) SetItemTypeID(s string) *ItemUpdate {
	iu.mutation.SetItemTypeID(s)
	return iu
}

// SetNillableItemTypeID sets the "item_type_id" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableItemTypeID(s *string) *ItemUpdate {
	if s != nil {
		iu.SetItemTypeID(*s)
	}
	return iu
}

// ClearItemTypeID clears the value of the "item_type_id" field.
func (iu *ItemUpdate) ClearItemTypeID() *ItemUpdate {
	iu.mutation.ClearItemTypeID()
	return iu
}

// SetUID sets the "uid" field.
func (iu *ItemUpdate) SetUID(s string) *ItemUpdate {
	iu.mutation.SetUID(s)
	return iu
}

// SetIsParent sets the "is_parent" field.
func (iu *ItemUpdate) SetIsParent(b bool) *ItemUpdate {
	iu.mutation.SetIsParent(b)
	return iu
}

// SetNillableIsParent sets the "is_parent" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableIsParent(b *bool) *ItemUpdate {
	if b != nil {
		iu.SetIsParent(*b)
	}
	return iu
}

// ClearIsParent clears the value of the "is_parent" field.
func (iu *ItemUpdate) ClearIsParent() *ItemUpdate {
	iu.mutation.ClearIsParent()
	return iu
}

// Mutation returns the ItemMutation object of the builder.
func (iu *ItemUpdate) Mutation() *ItemMutation {
	return iu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *ItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *ItemUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *ItemUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *ItemUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *ItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(item.Table, item.Columns, sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.TxTypeID(); ok {
		_spec.SetField(item.FieldTxTypeID, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.AddedTxTypeID(); ok {
		_spec.AddField(item.FieldTxTypeID, field.TypeInt64, value)
	}
	if iu.mutation.TxTypeIDCleared() {
		_spec.ClearField(item.FieldTxTypeID, field.TypeInt64)
	}
	if value, ok := iu.mutation.Sku(); ok {
		_spec.SetField(item.FieldSku, field.TypeString, value)
	}
	if iu.mutation.SkuCleared() {
		_spec.ClearField(item.FieldSku, field.TypeString)
	}
	if value, ok := iu.mutation.Title(); ok {
		_spec.SetField(item.FieldTitle, field.TypeString, value)
	}
	if iu.mutation.TitleCleared() {
		_spec.ClearField(item.FieldTitle, field.TypeString)
	}
	if value, ok := iu.mutation.SubTitle(); ok {
		_spec.SetField(item.FieldSubTitle, field.TypeString, value)
	}
	if iu.mutation.SubTitleCleared() {
		_spec.ClearField(item.FieldSubTitle, field.TypeString)
	}
	if value, ok := iu.mutation.StatusID(); ok {
		_spec.SetField(item.FieldStatusID, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.AddedStatusID(); ok {
		_spec.AddField(item.FieldStatusID, field.TypeInt64, value)
	}
	if iu.mutation.StatusIDCleared() {
		_spec.ClearField(item.FieldStatusID, field.TypeInt64)
	}
	if value, ok := iu.mutation.NoIndex(); ok {
		_spec.SetField(item.FieldNoIndex, field.TypeBool, value)
	}
	if iu.mutation.NoIndexCleared() {
		_spec.ClearField(item.FieldNoIndex, field.TypeBool)
	}
	if value, ok := iu.mutation.ItemCategoryID(); ok {
		_spec.SetField(item.FieldItemCategoryID, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.AddedItemCategoryID(); ok {
		_spec.AddField(item.FieldItemCategoryID, field.TypeInt64, value)
	}
	if iu.mutation.ItemCategoryIDCleared() {
		_spec.ClearField(item.FieldItemCategoryID, field.TypeInt64)
	}
	if value, ok := iu.mutation.BaseOnSalePrice(); ok {
		_spec.SetField(item.FieldBaseOnSalePrice, field.TypeBool, value)
	}
	if iu.mutation.BaseOnSalePriceCleared() {
		_spec.ClearField(item.FieldBaseOnSalePrice, field.TypeBool)
	}
	if value, ok := iu.mutation.RetailPrice(); ok {
		_spec.SetField(item.FieldRetailPrice, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedRetailPrice(); ok {
		_spec.AddField(item.FieldRetailPrice, field.TypeFloat64, value)
	}
	if iu.mutation.RetailPriceCleared() {
		_spec.ClearField(item.FieldRetailPrice, field.TypeFloat64)
	}
	if value, ok := iu.mutation.SalePrice(); ok {
		_spec.SetField(item.FieldSalePrice, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedSalePrice(); ok {
		_spec.AddField(item.FieldSalePrice, field.TypeFloat64, value)
	}
	if iu.mutation.SalePriceCleared() {
		_spec.ClearField(item.FieldSalePrice, field.TypeFloat64)
	}
	if value, ok := iu.mutation.ShippingProfileIDNum(); ok {
		_spec.SetField(item.FieldShippingProfileIDNum, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.AddedShippingProfileIDNum(); ok {
		_spec.AddField(item.FieldShippingProfileIDNum, field.TypeInt64, value)
	}
	if iu.mutation.ShippingProfileIDNumCleared() {
		_spec.ClearField(item.FieldShippingProfileIDNum, field.TypeInt64)
	}
	if value, ok := iu.mutation.OptimizationIDNum(); ok {
		_spec.SetField(item.FieldOptimizationIDNum, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.AddedOptimizationIDNum(); ok {
		_spec.AddField(item.FieldOptimizationIDNum, field.TypeInt64, value)
	}
	if iu.mutation.OptimizationIDNumCleared() {
		_spec.ClearField(item.FieldOptimizationIDNum, field.TypeInt64)
	}
	if value, ok := iu.mutation.Qty(); ok {
		_spec.SetField(item.FieldQty, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.AddedQty(); ok {
		_spec.AddField(item.FieldQty, field.TypeInt64, value)
	}
	if iu.mutation.QtyCleared() {
		_spec.ClearField(item.FieldQty, field.TypeInt64)
	}
	if value, ok := iu.mutation.MaximumOrderQty(); ok {
		_spec.SetField(item.FieldMaximumOrderQty, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.AddedMaximumOrderQty(); ok {
		_spec.AddField(item.FieldMaximumOrderQty, field.TypeInt64, value)
	}
	if iu.mutation.MaximumOrderQtyCleared() {
		_spec.ClearField(item.FieldMaximumOrderQty, field.TypeInt64)
	}
	if value, ok := iu.mutation.PkgWidth(); ok {
		_spec.SetField(item.FieldPkgWidth, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedPkgWidth(); ok {
		_spec.AddField(item.FieldPkgWidth, field.TypeFloat64, value)
	}
	if iu.mutation.PkgWidthCleared() {
		_spec.ClearField(item.FieldPkgWidth, field.TypeFloat64)
	}
	if value, ok := iu.mutation.PkgHeight(); ok {
		_spec.SetField(item.FieldPkgHeight, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedPkgHeight(); ok {
		_spec.AddField(item.FieldPkgHeight, field.TypeFloat64, value)
	}
	if iu.mutation.PkgHeightCleared() {
		_spec.ClearField(item.FieldPkgHeight, field.TypeFloat64)
	}
	if value, ok := iu.mutation.PkgLength(); ok {
		_spec.SetField(item.FieldPkgLength, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedPkgLength(); ok {
		_spec.AddField(item.FieldPkgLength, field.TypeFloat64, value)
	}
	if iu.mutation.PkgLengthCleared() {
		_spec.ClearField(item.FieldPkgLength, field.TypeFloat64)
	}
	if value, ok := iu.mutation.PkgWeight(); ok {
		_spec.SetField(item.FieldPkgWeight, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedPkgWeight(); ok {
		_spec.AddField(item.FieldPkgWeight, field.TypeFloat64, value)
	}
	if iu.mutation.PkgWeightCleared() {
		_spec.ClearField(item.FieldPkgWeight, field.TypeFloat64)
	}
	if value, ok := iu.mutation.ShortDesc(); ok {
		_spec.SetField(item.FieldShortDesc, field.TypeString, value)
	}
	if iu.mutation.ShortDescCleared() {
		_spec.ClearField(item.FieldShortDesc, field.TypeString)
	}
	if value, ok := iu.mutation.Descr(); ok {
		_spec.SetField(item.FieldDescr, field.TypeString, value)
	}
	if iu.mutation.DescrCleared() {
		_spec.ClearField(item.FieldDescr, field.TypeString)
	}
	if value, ok := iu.mutation.ImageUrl1(); ok {
		_spec.SetField(item.FieldImageUrl1, field.TypeString, value)
	}
	if iu.mutation.ImageUrl1Cleared() {
		_spec.ClearField(item.FieldImageUrl1, field.TypeString)
	}
	if value, ok := iu.mutation.ImageUrl2(); ok {
		_spec.SetField(item.FieldImageUrl2, field.TypeString, value)
	}
	if iu.mutation.ImageUrl2Cleared() {
		_spec.ClearField(item.FieldImageUrl2, field.TypeString)
	}
	if value, ok := iu.mutation.ImageUrl3(); ok {
		_spec.SetField(item.FieldImageUrl3, field.TypeString, value)
	}
	if iu.mutation.ImageUrl3Cleared() {
		_spec.ClearField(item.FieldImageUrl3, field.TypeString)
	}
	if value, ok := iu.mutation.ImageUrl4(); ok {
		_spec.SetField(item.FieldImageUrl4, field.TypeString, value)
	}
	if iu.mutation.ImageUrl4Cleared() {
		_spec.ClearField(item.FieldImageUrl4, field.TypeString)
	}
	if value, ok := iu.mutation.ImageUrl5(); ok {
		_spec.SetField(item.FieldImageUrl5, field.TypeString, value)
	}
	if iu.mutation.ImageUrl5Cleared() {
		_spec.ClearField(item.FieldImageUrl5, field.TypeString)
	}
	if value, ok := iu.mutation.Condition(); ok {
		_spec.SetField(item.FieldCondition, field.TypeString, value)
	}
	if iu.mutation.ConditionCleared() {
		_spec.ClearField(item.FieldCondition, field.TypeString)
	}
	if value, ok := iu.mutation.Brand(); ok {
		_spec.SetField(item.FieldBrand, field.TypeString, value)
	}
	if iu.mutation.BrandCleared() {
		_spec.ClearField(item.FieldBrand, field.TypeString)
	}
	if value, ok := iu.mutation.Gender(); ok {
		_spec.SetField(item.FieldGender, field.TypeString, value)
	}
	if iu.mutation.GenderCleared() {
		_spec.ClearField(item.FieldGender, field.TypeString)
	}
	if value, ok := iu.mutation.AgeGroup(); ok {
		_spec.SetField(item.FieldAgeGroup, field.TypeString, value)
	}
	if iu.mutation.AgeGroupCleared() {
		_spec.ClearField(item.FieldAgeGroup, field.TypeString)
	}
	if value, ok := iu.mutation.Color(); ok {
		_spec.SetField(item.FieldColor, field.TypeString, value)
	}
	if iu.mutation.ColorCleared() {
		_spec.ClearField(item.FieldColor, field.TypeString)
	}
	if value, ok := iu.mutation.Size(); ok {
		_spec.SetField(item.FieldSize, field.TypeString, value)
	}
	if iu.mutation.SizeCleared() {
		_spec.ClearField(item.FieldSize, field.TypeString)
	}
	if value, ok := iu.mutation.UxmItemIDNum(); ok {
		_spec.SetField(item.FieldUxmItemIDNum, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.AddedUxmItemIDNum(); ok {
		_spec.AddField(item.FieldUxmItemIDNum, field.TypeInt64, value)
	}
	if iu.mutation.UxmItemIDNumCleared() {
		_spec.ClearField(item.FieldUxmItemIDNum, field.TypeInt64)
	}
	if value, ok := iu.mutation.Sent(); ok {
		_spec.SetField(item.FieldSent, field.TypeBool, value)
	}
	if iu.mutation.SentCleared() {
		_spec.ClearField(item.FieldSent, field.TypeBool)
	}
	if value, ok := iu.mutation.SentAt(); ok {
		_spec.SetField(item.FieldSentAt, field.TypeTime, value)
	}
	if iu.mutation.SentAtCleared() {
		_spec.ClearField(item.FieldSentAt, field.TypeTime)
	}
	if value, ok := iu.mutation.HasError(); ok {
		_spec.SetField(item.FieldHasError, field.TypeBool, value)
	}
	if iu.mutation.HasErrorCleared() {
		_spec.ClearField(item.FieldHasError, field.TypeBool)
	}
	if value, ok := iu.mutation.LastLogID(); ok {
		_spec.SetField(item.FieldLastLogID, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.AddedLastLogID(); ok {
		_spec.AddField(item.FieldLastLogID, field.TypeInt64, value)
	}
	if iu.mutation.LastLogIDCleared() {
		_spec.ClearField(item.FieldLastLogID, field.TypeInt64)
	}
	if value, ok := iu.mutation.FeedResponse(); ok {
		_spec.SetField(item.FieldFeedResponse, field.TypeString, value)
	}
	if iu.mutation.FeedResponseCleared() {
		_spec.ClearField(item.FieldFeedResponse, field.TypeString)
	}
	if value, ok := iu.mutation.Keywords(); ok {
		_spec.SetField(item.FieldKeywords, field.TypeString, value)
	}
	if iu.mutation.KeywordsCleared() {
		_spec.ClearField(item.FieldKeywords, field.TypeString)
	}
	if value, ok := iu.mutation.Sync(); ok {
		_spec.SetField(item.FieldSync, field.TypeBool, value)
	}
	if iu.mutation.SyncCleared() {
		_spec.ClearField(item.FieldSync, field.TypeBool)
	}
	if value, ok := iu.mutation.UserID(); ok {
		_spec.SetField(item.FieldUserID, field.TypeString, value)
	}
	if iu.mutation.UserIDCleared() {
		_spec.ClearField(item.FieldUserID, field.TypeString)
	}
	if value, ok := iu.mutation.ShippingProfileID(); ok {
		_spec.SetField(item.FieldShippingProfileID, field.TypeString, value)
	}
	if iu.mutation.ShippingProfileIDCleared() {
		_spec.ClearField(item.FieldShippingProfileID, field.TypeString)
	}
	if value, ok := iu.mutation.OptimizationID(); ok {
		_spec.SetField(item.FieldOptimizationID, field.TypeString, value)
	}
	if iu.mutation.OptimizationIDCleared() {
		_spec.ClearField(item.FieldOptimizationID, field.TypeString)
	}
	if value, ok := iu.mutation.UxmItemID(); ok {
		_spec.SetField(item.FieldUxmItemID, field.TypeString, value)
	}
	if iu.mutation.UxmItemIDCleared() {
		_spec.ClearField(item.FieldUxmItemID, field.TypeString)
	}
	if value, ok := iu.mutation.ParentID(); ok {
		_spec.SetField(item.FieldParentID, field.TypeString, value)
	}
	if iu.mutation.ParentIDCleared() {
		_spec.ClearField(item.FieldParentID, field.TypeString)
	}
	if value, ok := iu.mutation.ItemTypeID(); ok {
		_spec.SetField(item.FieldItemTypeID, field.TypeString, value)
	}
	if iu.mutation.ItemTypeIDCleared() {
		_spec.ClearField(item.FieldItemTypeID, field.TypeString)
	}
	if value, ok := iu.mutation.UID(); ok {
		_spec.SetField(item.FieldUID, field.TypeString, value)
	}
	if value, ok := iu.mutation.IsParent(); ok {
		_spec.SetField(item.FieldIsParent, field.TypeBool, value)
	}
	if iu.mutation.IsParentCleared() {
		_spec.ClearField(item.FieldIsParent, field.TypeBool)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{item.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// ItemUpdateOne is the builder for updating a single Item entity.
type ItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ItemMutation
}

// SetTxTypeID sets the "tx_type_id" field.
func (iuo *ItemUpdateOne) SetTxTypeID(i int64) *ItemUpdateOne {
	iuo.mutation.ResetTxTypeID()
	iuo.mutation.SetTxTypeID(i)
	return iuo
}

// SetNillableTxTypeID sets the "tx_type_id" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableTxTypeID(i *int64) *ItemUpdateOne {
	if i != nil {
		iuo.SetTxTypeID(*i)
	}
	return iuo
}

// AddTxTypeID adds i to the "tx_type_id" field.
func (iuo *ItemUpdateOne) AddTxTypeID(i int64) *ItemUpdateOne {
	iuo.mutation.AddTxTypeID(i)
	return iuo
}

// ClearTxTypeID clears the value of the "tx_type_id" field.
func (iuo *ItemUpdateOne) ClearTxTypeID() *ItemUpdateOne {
	iuo.mutation.ClearTxTypeID()
	return iuo
}

// SetSku sets the "sku" field.
func (iuo *ItemUpdateOne) SetSku(s string) *ItemUpdateOne {
	iuo.mutation.SetSku(s)
	return iuo
}

// SetNillableSku sets the "sku" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableSku(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetSku(*s)
	}
	return iuo
}

// ClearSku clears the value of the "sku" field.
func (iuo *ItemUpdateOne) ClearSku() *ItemUpdateOne {
	iuo.mutation.ClearSku()
	return iuo
}

// SetTitle sets the "title" field.
func (iuo *ItemUpdateOne) SetTitle(s string) *ItemUpdateOne {
	iuo.mutation.SetTitle(s)
	return iuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableTitle(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetTitle(*s)
	}
	return iuo
}

// ClearTitle clears the value of the "title" field.
func (iuo *ItemUpdateOne) ClearTitle() *ItemUpdateOne {
	iuo.mutation.ClearTitle()
	return iuo
}

// SetSubTitle sets the "sub_title" field.
func (iuo *ItemUpdateOne) SetSubTitle(s string) *ItemUpdateOne {
	iuo.mutation.SetSubTitle(s)
	return iuo
}

// SetNillableSubTitle sets the "sub_title" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableSubTitle(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetSubTitle(*s)
	}
	return iuo
}

// ClearSubTitle clears the value of the "sub_title" field.
func (iuo *ItemUpdateOne) ClearSubTitle() *ItemUpdateOne {
	iuo.mutation.ClearSubTitle()
	return iuo
}

// SetStatusID sets the "status_id" field.
func (iuo *ItemUpdateOne) SetStatusID(i int64) *ItemUpdateOne {
	iuo.mutation.ResetStatusID()
	iuo.mutation.SetStatusID(i)
	return iuo
}

// SetNillableStatusID sets the "status_id" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableStatusID(i *int64) *ItemUpdateOne {
	if i != nil {
		iuo.SetStatusID(*i)
	}
	return iuo
}

// AddStatusID adds i to the "status_id" field.
func (iuo *ItemUpdateOne) AddStatusID(i int64) *ItemUpdateOne {
	iuo.mutation.AddStatusID(i)
	return iuo
}

// ClearStatusID clears the value of the "status_id" field.
func (iuo *ItemUpdateOne) ClearStatusID() *ItemUpdateOne {
	iuo.mutation.ClearStatusID()
	return iuo
}

// SetNoIndex sets the "no_index" field.
func (iuo *ItemUpdateOne) SetNoIndex(b bool) *ItemUpdateOne {
	iuo.mutation.SetNoIndex(b)
	return iuo
}

// SetNillableNoIndex sets the "no_index" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableNoIndex(b *bool) *ItemUpdateOne {
	if b != nil {
		iuo.SetNoIndex(*b)
	}
	return iuo
}

// ClearNoIndex clears the value of the "no_index" field.
func (iuo *ItemUpdateOne) ClearNoIndex() *ItemUpdateOne {
	iuo.mutation.ClearNoIndex()
	return iuo
}

// SetItemCategoryID sets the "item_category_id" field.
func (iuo *ItemUpdateOne) SetItemCategoryID(i int64) *ItemUpdateOne {
	iuo.mutation.ResetItemCategoryID()
	iuo.mutation.SetItemCategoryID(i)
	return iuo
}

// SetNillableItemCategoryID sets the "item_category_id" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableItemCategoryID(i *int64) *ItemUpdateOne {
	if i != nil {
		iuo.SetItemCategoryID(*i)
	}
	return iuo
}

// AddItemCategoryID adds i to the "item_category_id" field.
func (iuo *ItemUpdateOne) AddItemCategoryID(i int64) *ItemUpdateOne {
	iuo.mutation.AddItemCategoryID(i)
	return iuo
}

// ClearItemCategoryID clears the value of the "item_category_id" field.
func (iuo *ItemUpdateOne) ClearItemCategoryID() *ItemUpdateOne {
	iuo.mutation.ClearItemCategoryID()
	return iuo
}

// SetBaseOnSalePrice sets the "base_on_sale_price" field.
func (iuo *ItemUpdateOne) SetBaseOnSalePrice(b bool) *ItemUpdateOne {
	iuo.mutation.SetBaseOnSalePrice(b)
	return iuo
}

// SetNillableBaseOnSalePrice sets the "base_on_sale_price" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableBaseOnSalePrice(b *bool) *ItemUpdateOne {
	if b != nil {
		iuo.SetBaseOnSalePrice(*b)
	}
	return iuo
}

// ClearBaseOnSalePrice clears the value of the "base_on_sale_price" field.
func (iuo *ItemUpdateOne) ClearBaseOnSalePrice() *ItemUpdateOne {
	iuo.mutation.ClearBaseOnSalePrice()
	return iuo
}

// SetRetailPrice sets the "retail_price" field.
func (iuo *ItemUpdateOne) SetRetailPrice(f float64) *ItemUpdateOne {
	iuo.mutation.ResetRetailPrice()
	iuo.mutation.SetRetailPrice(f)
	return iuo
}

// SetNillableRetailPrice sets the "retail_price" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableRetailPrice(f *float64) *ItemUpdateOne {
	if f != nil {
		iuo.SetRetailPrice(*f)
	}
	return iuo
}

// AddRetailPrice adds f to the "retail_price" field.
func (iuo *ItemUpdateOne) AddRetailPrice(f float64) *ItemUpdateOne {
	iuo.mutation.AddRetailPrice(f)
	return iuo
}

// ClearRetailPrice clears the value of the "retail_price" field.
func (iuo *ItemUpdateOne) ClearRetailPrice() *ItemUpdateOne {
	iuo.mutation.ClearRetailPrice()
	return iuo
}

// SetSalePrice sets the "sale_price" field.
func (iuo *ItemUpdateOne) SetSalePrice(f float64) *ItemUpdateOne {
	iuo.mutation.ResetSalePrice()
	iuo.mutation.SetSalePrice(f)
	return iuo
}

// SetNillableSalePrice sets the "sale_price" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableSalePrice(f *float64) *ItemUpdateOne {
	if f != nil {
		iuo.SetSalePrice(*f)
	}
	return iuo
}

// AddSalePrice adds f to the "sale_price" field.
func (iuo *ItemUpdateOne) AddSalePrice(f float64) *ItemUpdateOne {
	iuo.mutation.AddSalePrice(f)
	return iuo
}

// ClearSalePrice clears the value of the "sale_price" field.
func (iuo *ItemUpdateOne) ClearSalePrice() *ItemUpdateOne {
	iuo.mutation.ClearSalePrice()
	return iuo
}

// SetShippingProfileIDNum sets the "shipping_profile_id_num" field.
func (iuo *ItemUpdateOne) SetShippingProfileIDNum(i int64) *ItemUpdateOne {
	iuo.mutation.ResetShippingProfileIDNum()
	iuo.mutation.SetShippingProfileIDNum(i)
	return iuo
}

// SetNillableShippingProfileIDNum sets the "shipping_profile_id_num" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableShippingProfileIDNum(i *int64) *ItemUpdateOne {
	if i != nil {
		iuo.SetShippingProfileIDNum(*i)
	}
	return iuo
}

// AddShippingProfileIDNum adds i to the "shipping_profile_id_num" field.
func (iuo *ItemUpdateOne) AddShippingProfileIDNum(i int64) *ItemUpdateOne {
	iuo.mutation.AddShippingProfileIDNum(i)
	return iuo
}

// ClearShippingProfileIDNum clears the value of the "shipping_profile_id_num" field.
func (iuo *ItemUpdateOne) ClearShippingProfileIDNum() *ItemUpdateOne {
	iuo.mutation.ClearShippingProfileIDNum()
	return iuo
}

// SetOptimizationIDNum sets the "optimization_id_num" field.
func (iuo *ItemUpdateOne) SetOptimizationIDNum(i int64) *ItemUpdateOne {
	iuo.mutation.ResetOptimizationIDNum()
	iuo.mutation.SetOptimizationIDNum(i)
	return iuo
}

// SetNillableOptimizationIDNum sets the "optimization_id_num" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableOptimizationIDNum(i *int64) *ItemUpdateOne {
	if i != nil {
		iuo.SetOptimizationIDNum(*i)
	}
	return iuo
}

// AddOptimizationIDNum adds i to the "optimization_id_num" field.
func (iuo *ItemUpdateOne) AddOptimizationIDNum(i int64) *ItemUpdateOne {
	iuo.mutation.AddOptimizationIDNum(i)
	return iuo
}

// ClearOptimizationIDNum clears the value of the "optimization_id_num" field.
func (iuo *ItemUpdateOne) ClearOptimizationIDNum() *ItemUpdateOne {
	iuo.mutation.ClearOptimizationIDNum()
	return iuo
}

// SetQty sets the "qty" field.
func (iuo *ItemUpdateOne) SetQty(i int64) *ItemUpdateOne {
	iuo.mutation.ResetQty()
	iuo.mutation.SetQty(i)
	return iuo
}

// SetNillableQty sets the "qty" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableQty(i *int64) *ItemUpdateOne {
	if i != nil {
		iuo.SetQty(*i)
	}
	return iuo
}

// AddQty adds i to the "qty" field.
func (iuo *ItemUpdateOne) AddQty(i int64) *ItemUpdateOne {
	iuo.mutation.AddQty(i)
	return iuo
}

// ClearQty clears the value of the "qty" field.
func (iuo *ItemUpdateOne) ClearQty() *ItemUpdateOne {
	iuo.mutation.ClearQty()
	return iuo
}

// SetMaximumOrderQty sets the "maximum_order_qty" field.
func (iuo *ItemUpdateOne) SetMaximumOrderQty(i int64) *ItemUpdateOne {
	iuo.mutation.ResetMaximumOrderQty()
	iuo.mutation.SetMaximumOrderQty(i)
	return iuo
}

// SetNillableMaximumOrderQty sets the "maximum_order_qty" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableMaximumOrderQty(i *int64) *ItemUpdateOne {
	if i != nil {
		iuo.SetMaximumOrderQty(*i)
	}
	return iuo
}

// AddMaximumOrderQty adds i to the "maximum_order_qty" field.
func (iuo *ItemUpdateOne) AddMaximumOrderQty(i int64) *ItemUpdateOne {
	iuo.mutation.AddMaximumOrderQty(i)
	return iuo
}

// ClearMaximumOrderQty clears the value of the "maximum_order_qty" field.
func (iuo *ItemUpdateOne) ClearMaximumOrderQty() *ItemUpdateOne {
	iuo.mutation.ClearMaximumOrderQty()
	return iuo
}

// SetPkgWidth sets the "pkg_width" field.
func (iuo *ItemUpdateOne) SetPkgWidth(f float64) *ItemUpdateOne {
	iuo.mutation.ResetPkgWidth()
	iuo.mutation.SetPkgWidth(f)
	return iuo
}

// SetNillablePkgWidth sets the "pkg_width" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillablePkgWidth(f *float64) *ItemUpdateOne {
	if f != nil {
		iuo.SetPkgWidth(*f)
	}
	return iuo
}

// AddPkgWidth adds f to the "pkg_width" field.
func (iuo *ItemUpdateOne) AddPkgWidth(f float64) *ItemUpdateOne {
	iuo.mutation.AddPkgWidth(f)
	return iuo
}

// ClearPkgWidth clears the value of the "pkg_width" field.
func (iuo *ItemUpdateOne) ClearPkgWidth() *ItemUpdateOne {
	iuo.mutation.ClearPkgWidth()
	return iuo
}

// SetPkgHeight sets the "pkg_height" field.
func (iuo *ItemUpdateOne) SetPkgHeight(f float64) *ItemUpdateOne {
	iuo.mutation.ResetPkgHeight()
	iuo.mutation.SetPkgHeight(f)
	return iuo
}

// SetNillablePkgHeight sets the "pkg_height" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillablePkgHeight(f *float64) *ItemUpdateOne {
	if f != nil {
		iuo.SetPkgHeight(*f)
	}
	return iuo
}

// AddPkgHeight adds f to the "pkg_height" field.
func (iuo *ItemUpdateOne) AddPkgHeight(f float64) *ItemUpdateOne {
	iuo.mutation.AddPkgHeight(f)
	return iuo
}

// ClearPkgHeight clears the value of the "pkg_height" field.
func (iuo *ItemUpdateOne) ClearPkgHeight() *ItemUpdateOne {
	iuo.mutation.ClearPkgHeight()
	return iuo
}

// SetPkgLength sets the "pkg_length" field.
func (iuo *ItemUpdateOne) SetPkgLength(f float64) *ItemUpdateOne {
	iuo.mutation.ResetPkgLength()
	iuo.mutation.SetPkgLength(f)
	return iuo
}

// SetNillablePkgLength sets the "pkg_length" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillablePkgLength(f *float64) *ItemUpdateOne {
	if f != nil {
		iuo.SetPkgLength(*f)
	}
	return iuo
}

// AddPkgLength adds f to the "pkg_length" field.
func (iuo *ItemUpdateOne) AddPkgLength(f float64) *ItemUpdateOne {
	iuo.mutation.AddPkgLength(f)
	return iuo
}

// ClearPkgLength clears the value of the "pkg_length" field.
func (iuo *ItemUpdateOne) ClearPkgLength() *ItemUpdateOne {
	iuo.mutation.ClearPkgLength()
	return iuo
}

// SetPkgWeight sets the "pkg_weight" field.
func (iuo *ItemUpdateOne) SetPkgWeight(f float64) *ItemUpdateOne {
	iuo.mutation.ResetPkgWeight()
	iuo.mutation.SetPkgWeight(f)
	return iuo
}

// SetNillablePkgWeight sets the "pkg_weight" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillablePkgWeight(f *float64) *ItemUpdateOne {
	if f != nil {
		iuo.SetPkgWeight(*f)
	}
	return iuo
}

// AddPkgWeight adds f to the "pkg_weight" field.
func (iuo *ItemUpdateOne) AddPkgWeight(f float64) *ItemUpdateOne {
	iuo.mutation.AddPkgWeight(f)
	return iuo
}

// ClearPkgWeight clears the value of the "pkg_weight" field.
func (iuo *ItemUpdateOne) ClearPkgWeight() *ItemUpdateOne {
	iuo.mutation.ClearPkgWeight()
	return iuo
}

// SetShortDesc sets the "short_desc" field.
func (iuo *ItemUpdateOne) SetShortDesc(s string) *ItemUpdateOne {
	iuo.mutation.SetShortDesc(s)
	return iuo
}

// SetNillableShortDesc sets the "short_desc" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableShortDesc(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetShortDesc(*s)
	}
	return iuo
}

// ClearShortDesc clears the value of the "short_desc" field.
func (iuo *ItemUpdateOne) ClearShortDesc() *ItemUpdateOne {
	iuo.mutation.ClearShortDesc()
	return iuo
}

// SetDescr sets the "descr" field.
func (iuo *ItemUpdateOne) SetDescr(s string) *ItemUpdateOne {
	iuo.mutation.SetDescr(s)
	return iuo
}

// SetNillableDescr sets the "descr" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableDescr(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetDescr(*s)
	}
	return iuo
}

// ClearDescr clears the value of the "descr" field.
func (iuo *ItemUpdateOne) ClearDescr() *ItemUpdateOne {
	iuo.mutation.ClearDescr()
	return iuo
}

// SetImageUrl1 sets the "image_url1" field.
func (iuo *ItemUpdateOne) SetImageUrl1(s string) *ItemUpdateOne {
	iuo.mutation.SetImageUrl1(s)
	return iuo
}

// SetNillableImageUrl1 sets the "image_url1" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableImageUrl1(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetImageUrl1(*s)
	}
	return iuo
}

// ClearImageUrl1 clears the value of the "image_url1" field.
func (iuo *ItemUpdateOne) ClearImageUrl1() *ItemUpdateOne {
	iuo.mutation.ClearImageUrl1()
	return iuo
}

// SetImageUrl2 sets the "image_url2" field.
func (iuo *ItemUpdateOne) SetImageUrl2(s string) *ItemUpdateOne {
	iuo.mutation.SetImageUrl2(s)
	return iuo
}

// SetNillableImageUrl2 sets the "image_url2" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableImageUrl2(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetImageUrl2(*s)
	}
	return iuo
}

// ClearImageUrl2 clears the value of the "image_url2" field.
func (iuo *ItemUpdateOne) ClearImageUrl2() *ItemUpdateOne {
	iuo.mutation.ClearImageUrl2()
	return iuo
}

// SetImageUrl3 sets the "image_url3" field.
func (iuo *ItemUpdateOne) SetImageUrl3(s string) *ItemUpdateOne {
	iuo.mutation.SetImageUrl3(s)
	return iuo
}

// SetNillableImageUrl3 sets the "image_url3" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableImageUrl3(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetImageUrl3(*s)
	}
	return iuo
}

// ClearImageUrl3 clears the value of the "image_url3" field.
func (iuo *ItemUpdateOne) ClearImageUrl3() *ItemUpdateOne {
	iuo.mutation.ClearImageUrl3()
	return iuo
}

// SetImageUrl4 sets the "image_url4" field.
func (iuo *ItemUpdateOne) SetImageUrl4(s string) *ItemUpdateOne {
	iuo.mutation.SetImageUrl4(s)
	return iuo
}

// SetNillableImageUrl4 sets the "image_url4" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableImageUrl4(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetImageUrl4(*s)
	}
	return iuo
}

// ClearImageUrl4 clears the value of the "image_url4" field.
func (iuo *ItemUpdateOne) ClearImageUrl4() *ItemUpdateOne {
	iuo.mutation.ClearImageUrl4()
	return iuo
}

// SetImageUrl5 sets the "image_url5" field.
func (iuo *ItemUpdateOne) SetImageUrl5(s string) *ItemUpdateOne {
	iuo.mutation.SetImageUrl5(s)
	return iuo
}

// SetNillableImageUrl5 sets the "image_url5" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableImageUrl5(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetImageUrl5(*s)
	}
	return iuo
}

// ClearImageUrl5 clears the value of the "image_url5" field.
func (iuo *ItemUpdateOne) ClearImageUrl5() *ItemUpdateOne {
	iuo.mutation.ClearImageUrl5()
	return iuo
}

// SetCondition sets the "condition" field.
func (iuo *ItemUpdateOne) SetCondition(s string) *ItemUpdateOne {
	iuo.mutation.SetCondition(s)
	return iuo
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableCondition(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetCondition(*s)
	}
	return iuo
}

// ClearCondition clears the value of the "condition" field.
func (iuo *ItemUpdateOne) ClearCondition() *ItemUpdateOne {
	iuo.mutation.ClearCondition()
	return iuo
}

// SetBrand sets the "brand" field.
func (iuo *ItemUpdateOne) SetBrand(s string) *ItemUpdateOne {
	iuo.mutation.SetBrand(s)
	return iuo
}

// SetNillableBrand sets the "brand" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableBrand(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetBrand(*s)
	}
	return iuo
}

// ClearBrand clears the value of the "brand" field.
func (iuo *ItemUpdateOne) ClearBrand() *ItemUpdateOne {
	iuo.mutation.ClearBrand()
	return iuo
}

// SetGender sets the "gender" field.
func (iuo *ItemUpdateOne) SetGender(s string) *ItemUpdateOne {
	iuo.mutation.SetGender(s)
	return iuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableGender(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetGender(*s)
	}
	return iuo
}

// ClearGender clears the value of the "gender" field.
func (iuo *ItemUpdateOne) ClearGender() *ItemUpdateOne {
	iuo.mutation.ClearGender()
	return iuo
}

// SetAgeGroup sets the "age_group" field.
func (iuo *ItemUpdateOne) SetAgeGroup(s string) *ItemUpdateOne {
	iuo.mutation.SetAgeGroup(s)
	return iuo
}

// SetNillableAgeGroup sets the "age_group" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableAgeGroup(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetAgeGroup(*s)
	}
	return iuo
}

// ClearAgeGroup clears the value of the "age_group" field.
func (iuo *ItemUpdateOne) ClearAgeGroup() *ItemUpdateOne {
	iuo.mutation.ClearAgeGroup()
	return iuo
}

// SetColor sets the "color" field.
func (iuo *ItemUpdateOne) SetColor(s string) *ItemUpdateOne {
	iuo.mutation.SetColor(s)
	return iuo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableColor(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetColor(*s)
	}
	return iuo
}

// ClearColor clears the value of the "color" field.
func (iuo *ItemUpdateOne) ClearColor() *ItemUpdateOne {
	iuo.mutation.ClearColor()
	return iuo
}

// SetSize sets the "size" field.
func (iuo *ItemUpdateOne) SetSize(s string) *ItemUpdateOne {
	iuo.mutation.SetSize(s)
	return iuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableSize(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetSize(*s)
	}
	return iuo
}

// ClearSize clears the value of the "size" field.
func (iuo *ItemUpdateOne) ClearSize() *ItemUpdateOne {
	iuo.mutation.ClearSize()
	return iuo
}

// SetUxmItemIDNum sets the "uxm_item_id_num" field.
func (iuo *ItemUpdateOne) SetUxmItemIDNum(i int64) *ItemUpdateOne {
	iuo.mutation.ResetUxmItemIDNum()
	iuo.mutation.SetUxmItemIDNum(i)
	return iuo
}

// SetNillableUxmItemIDNum sets the "uxm_item_id_num" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableUxmItemIDNum(i *int64) *ItemUpdateOne {
	if i != nil {
		iuo.SetUxmItemIDNum(*i)
	}
	return iuo
}

// AddUxmItemIDNum adds i to the "uxm_item_id_num" field.
func (iuo *ItemUpdateOne) AddUxmItemIDNum(i int64) *ItemUpdateOne {
	iuo.mutation.AddUxmItemIDNum(i)
	return iuo
}

// ClearUxmItemIDNum clears the value of the "uxm_item_id_num" field.
func (iuo *ItemUpdateOne) ClearUxmItemIDNum() *ItemUpdateOne {
	iuo.mutation.ClearUxmItemIDNum()
	return iuo
}

// SetSent sets the "sent" field.
func (iuo *ItemUpdateOne) SetSent(b bool) *ItemUpdateOne {
	iuo.mutation.SetSent(b)
	return iuo
}

// SetNillableSent sets the "sent" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableSent(b *bool) *ItemUpdateOne {
	if b != nil {
		iuo.SetSent(*b)
	}
	return iuo
}

// ClearSent clears the value of the "sent" field.
func (iuo *ItemUpdateOne) ClearSent() *ItemUpdateOne {
	iuo.mutation.ClearSent()
	return iuo
}

// SetSentAt sets the "sent_at" field.
func (iuo *ItemUpdateOne) SetSentAt(t time.Time) *ItemUpdateOne {
	iuo.mutation.SetSentAt(t)
	return iuo
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableSentAt(t *time.Time) *ItemUpdateOne {
	if t != nil {
		iuo.SetSentAt(*t)
	}
	return iuo
}

// ClearSentAt clears the value of the "sent_at" field.
func (iuo *ItemUpdateOne) ClearSentAt() *ItemUpdateOne {
	iuo.mutation.ClearSentAt()
	return iuo
}

// SetHasError sets the "has_error" field.
func (iuo *ItemUpdateOne) SetHasError(b bool) *ItemUpdateOne {
	iuo.mutation.SetHasError(b)
	return iuo
}

// SetNillableHasError sets the "has_error" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableHasError(b *bool) *ItemUpdateOne {
	if b != nil {
		iuo.SetHasError(*b)
	}
	return iuo
}

// ClearHasError clears the value of the "has_error" field.
func (iuo *ItemUpdateOne) ClearHasError() *ItemUpdateOne {
	iuo.mutation.ClearHasError()
	return iuo
}

// SetLastLogID sets the "last_log_id" field.
func (iuo *ItemUpdateOne) SetLastLogID(i int64) *ItemUpdateOne {
	iuo.mutation.ResetLastLogID()
	iuo.mutation.SetLastLogID(i)
	return iuo
}

// SetNillableLastLogID sets the "last_log_id" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableLastLogID(i *int64) *ItemUpdateOne {
	if i != nil {
		iuo.SetLastLogID(*i)
	}
	return iuo
}

// AddLastLogID adds i to the "last_log_id" field.
func (iuo *ItemUpdateOne) AddLastLogID(i int64) *ItemUpdateOne {
	iuo.mutation.AddLastLogID(i)
	return iuo
}

// ClearLastLogID clears the value of the "last_log_id" field.
func (iuo *ItemUpdateOne) ClearLastLogID() *ItemUpdateOne {
	iuo.mutation.ClearLastLogID()
	return iuo
}

// SetFeedResponse sets the "feed_response" field.
func (iuo *ItemUpdateOne) SetFeedResponse(s string) *ItemUpdateOne {
	iuo.mutation.SetFeedResponse(s)
	return iuo
}

// SetNillableFeedResponse sets the "feed_response" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableFeedResponse(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetFeedResponse(*s)
	}
	return iuo
}

// ClearFeedResponse clears the value of the "feed_response" field.
func (iuo *ItemUpdateOne) ClearFeedResponse() *ItemUpdateOne {
	iuo.mutation.ClearFeedResponse()
	return iuo
}

// SetKeywords sets the "keywords" field.
func (iuo *ItemUpdateOne) SetKeywords(s string) *ItemUpdateOne {
	iuo.mutation.SetKeywords(s)
	return iuo
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableKeywords(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetKeywords(*s)
	}
	return iuo
}

// ClearKeywords clears the value of the "keywords" field.
func (iuo *ItemUpdateOne) ClearKeywords() *ItemUpdateOne {
	iuo.mutation.ClearKeywords()
	return iuo
}

// SetSync sets the "sync" field.
func (iuo *ItemUpdateOne) SetSync(b bool) *ItemUpdateOne {
	iuo.mutation.SetSync(b)
	return iuo
}

// SetNillableSync sets the "sync" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableSync(b *bool) *ItemUpdateOne {
	if b != nil {
		iuo.SetSync(*b)
	}
	return iuo
}

// ClearSync clears the value of the "sync" field.
func (iuo *ItemUpdateOne) ClearSync() *ItemUpdateOne {
	iuo.mutation.ClearSync()
	return iuo
}

// SetUserID sets the "user_id" field.
func (iuo *ItemUpdateOne) SetUserID(s string) *ItemUpdateOne {
	iuo.mutation.SetUserID(s)
	return iuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableUserID(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetUserID(*s)
	}
	return iuo
}

// ClearUserID clears the value of the "user_id" field.
func (iuo *ItemUpdateOne) ClearUserID() *ItemUpdateOne {
	iuo.mutation.ClearUserID()
	return iuo
}

// SetShippingProfileID sets the "shipping_profile_id" field.
func (iuo *ItemUpdateOne) SetShippingProfileID(s string) *ItemUpdateOne {
	iuo.mutation.SetShippingProfileID(s)
	return iuo
}

// SetNillableShippingProfileID sets the "shipping_profile_id" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableShippingProfileID(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetShippingProfileID(*s)
	}
	return iuo
}

// ClearShippingProfileID clears the value of the "shipping_profile_id" field.
func (iuo *ItemUpdateOne) ClearShippingProfileID() *ItemUpdateOne {
	iuo.mutation.ClearShippingProfileID()
	return iuo
}

// SetOptimizationID sets the "optimization_id" field.
func (iuo *ItemUpdateOne) SetOptimizationID(s string) *ItemUpdateOne {
	iuo.mutation.SetOptimizationID(s)
	return iuo
}

// SetNillableOptimizationID sets the "optimization_id" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableOptimizationID(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetOptimizationID(*s)
	}
	return iuo
}

// ClearOptimizationID clears the value of the "optimization_id" field.
func (iuo *ItemUpdateOne) ClearOptimizationID() *ItemUpdateOne {
	iuo.mutation.ClearOptimizationID()
	return iuo
}

// SetUxmItemID sets the "uxm_item_id" field.
func (iuo *ItemUpdateOne) SetUxmItemID(s string) *ItemUpdateOne {
	iuo.mutation.SetUxmItemID(s)
	return iuo
}

// SetNillableUxmItemID sets the "uxm_item_id" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableUxmItemID(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetUxmItemID(*s)
	}
	return iuo
}

// ClearUxmItemID clears the value of the "uxm_item_id" field.
func (iuo *ItemUpdateOne) ClearUxmItemID() *ItemUpdateOne {
	iuo.mutation.ClearUxmItemID()
	return iuo
}

// SetParentID sets the "parent_id" field.
func (iuo *ItemUpdateOne) SetParentID(s string) *ItemUpdateOne {
	iuo.mutation.SetParentID(s)
	return iuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableParentID(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetParentID(*s)
	}
	return iuo
}

// ClearParentID clears the value of the "parent_id" field.
func (iuo *ItemUpdateOne) ClearParentID() *ItemUpdateOne {
	iuo.mutation.ClearParentID()
	return iuo
}

// SetItemTypeID sets the "item_type_id" field.
func (iuo *ItemUpdateOne) SetItemTypeID(s string) *ItemUpdateOne {
	iuo.mutation.SetItemTypeID(s)
	return iuo
}

// SetNillableItemTypeID sets the "item_type_id" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableItemTypeID(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetItemTypeID(*s)
	}
	return iuo
}

// ClearItemTypeID clears the value of the "item_type_id" field.
func (iuo *ItemUpdateOne) ClearItemTypeID() *ItemUpdateOne {
	iuo.mutation.ClearItemTypeID()
	return iuo
}

// SetUID sets the "uid" field.
func (iuo *ItemUpdateOne) SetUID(s string) *ItemUpdateOne {
	iuo.mutation.SetUID(s)
	return iuo
}

// SetIsParent sets the "is_parent" field.
func (iuo *ItemUpdateOne) SetIsParent(b bool) *ItemUpdateOne {
	iuo.mutation.SetIsParent(b)
	return iuo
}

// SetNillableIsParent sets the "is_parent" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableIsParent(b *bool) *ItemUpdateOne {
	if b != nil {
		iuo.SetIsParent(*b)
	}
	return iuo
}

// ClearIsParent clears the value of the "is_parent" field.
func (iuo *ItemUpdateOne) ClearIsParent() *ItemUpdateOne {
	iuo.mutation.ClearIsParent()
	return iuo
}

// Mutation returns the ItemMutation object of the builder.
func (iuo *ItemUpdateOne) Mutation() *ItemMutation {
	return iuo.mutation
}

// Where appends a list predicates to the ItemUpdate builder.
func (iuo *ItemUpdateOne) Where(ps ...predicate.Item) *ItemUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *ItemUpdateOne) Select(field string, fields ...string) *ItemUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Item entity.
func (iuo *ItemUpdateOne) Save(ctx context.Context) (*Item, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *ItemUpdateOne) SaveX(ctx context.Context) *Item {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *ItemUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *ItemUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *ItemUpdateOne) sqlSave(ctx context.Context) (_node *Item, err error) {
	_spec := sqlgraph.NewUpdateSpec(item.Table, item.Columns, sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Item.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, item.FieldID)
		for _, f := range fields {
			if !item.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != item.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.TxTypeID(); ok {
		_spec.SetField(item.FieldTxTypeID, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.AddedTxTypeID(); ok {
		_spec.AddField(item.FieldTxTypeID, field.TypeInt64, value)
	}
	if iuo.mutation.TxTypeIDCleared() {
		_spec.ClearField(item.FieldTxTypeID, field.TypeInt64)
	}
	if value, ok := iuo.mutation.Sku(); ok {
		_spec.SetField(item.FieldSku, field.TypeString, value)
	}
	if iuo.mutation.SkuCleared() {
		_spec.ClearField(item.FieldSku, field.TypeString)
	}
	if value, ok := iuo.mutation.Title(); ok {
		_spec.SetField(item.FieldTitle, field.TypeString, value)
	}
	if iuo.mutation.TitleCleared() {
		_spec.ClearField(item.FieldTitle, field.TypeString)
	}
	if value, ok := iuo.mutation.SubTitle(); ok {
		_spec.SetField(item.FieldSubTitle, field.TypeString, value)
	}
	if iuo.mutation.SubTitleCleared() {
		_spec.ClearField(item.FieldSubTitle, field.TypeString)
	}
	if value, ok := iuo.mutation.StatusID(); ok {
		_spec.SetField(item.FieldStatusID, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.AddedStatusID(); ok {
		_spec.AddField(item.FieldStatusID, field.TypeInt64, value)
	}
	if iuo.mutation.StatusIDCleared() {
		_spec.ClearField(item.FieldStatusID, field.TypeInt64)
	}
	if value, ok := iuo.mutation.NoIndex(); ok {
		_spec.SetField(item.FieldNoIndex, field.TypeBool, value)
	}
	if iuo.mutation.NoIndexCleared() {
		_spec.ClearField(item.FieldNoIndex, field.TypeBool)
	}
	if value, ok := iuo.mutation.ItemCategoryID(); ok {
		_spec.SetField(item.FieldItemCategoryID, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.AddedItemCategoryID(); ok {
		_spec.AddField(item.FieldItemCategoryID, field.TypeInt64, value)
	}
	if iuo.mutation.ItemCategoryIDCleared() {
		_spec.ClearField(item.FieldItemCategoryID, field.TypeInt64)
	}
	if value, ok := iuo.mutation.BaseOnSalePrice(); ok {
		_spec.SetField(item.FieldBaseOnSalePrice, field.TypeBool, value)
	}
	if iuo.mutation.BaseOnSalePriceCleared() {
		_spec.ClearField(item.FieldBaseOnSalePrice, field.TypeBool)
	}
	if value, ok := iuo.mutation.RetailPrice(); ok {
		_spec.SetField(item.FieldRetailPrice, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedRetailPrice(); ok {
		_spec.AddField(item.FieldRetailPrice, field.TypeFloat64, value)
	}
	if iuo.mutation.RetailPriceCleared() {
		_spec.ClearField(item.FieldRetailPrice, field.TypeFloat64)
	}
	if value, ok := iuo.mutation.SalePrice(); ok {
		_spec.SetField(item.FieldSalePrice, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedSalePrice(); ok {
		_spec.AddField(item.FieldSalePrice, field.TypeFloat64, value)
	}
	if iuo.mutation.SalePriceCleared() {
		_spec.ClearField(item.FieldSalePrice, field.TypeFloat64)
	}
	if value, ok := iuo.mutation.ShippingProfileIDNum(); ok {
		_spec.SetField(item.FieldShippingProfileIDNum, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.AddedShippingProfileIDNum(); ok {
		_spec.AddField(item.FieldShippingProfileIDNum, field.TypeInt64, value)
	}
	if iuo.mutation.ShippingProfileIDNumCleared() {
		_spec.ClearField(item.FieldShippingProfileIDNum, field.TypeInt64)
	}
	if value, ok := iuo.mutation.OptimizationIDNum(); ok {
		_spec.SetField(item.FieldOptimizationIDNum, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.AddedOptimizationIDNum(); ok {
		_spec.AddField(item.FieldOptimizationIDNum, field.TypeInt64, value)
	}
	if iuo.mutation.OptimizationIDNumCleared() {
		_spec.ClearField(item.FieldOptimizationIDNum, field.TypeInt64)
	}
	if value, ok := iuo.mutation.Qty(); ok {
		_spec.SetField(item.FieldQty, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.AddedQty(); ok {
		_spec.AddField(item.FieldQty, field.TypeInt64, value)
	}
	if iuo.mutation.QtyCleared() {
		_spec.ClearField(item.FieldQty, field.TypeInt64)
	}
	if value, ok := iuo.mutation.MaximumOrderQty(); ok {
		_spec.SetField(item.FieldMaximumOrderQty, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.AddedMaximumOrderQty(); ok {
		_spec.AddField(item.FieldMaximumOrderQty, field.TypeInt64, value)
	}
	if iuo.mutation.MaximumOrderQtyCleared() {
		_spec.ClearField(item.FieldMaximumOrderQty, field.TypeInt64)
	}
	if value, ok := iuo.mutation.PkgWidth(); ok {
		_spec.SetField(item.FieldPkgWidth, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedPkgWidth(); ok {
		_spec.AddField(item.FieldPkgWidth, field.TypeFloat64, value)
	}
	if iuo.mutation.PkgWidthCleared() {
		_spec.ClearField(item.FieldPkgWidth, field.TypeFloat64)
	}
	if value, ok := iuo.mutation.PkgHeight(); ok {
		_spec.SetField(item.FieldPkgHeight, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedPkgHeight(); ok {
		_spec.AddField(item.FieldPkgHeight, field.TypeFloat64, value)
	}
	if iuo.mutation.PkgHeightCleared() {
		_spec.ClearField(item.FieldPkgHeight, field.TypeFloat64)
	}
	if value, ok := iuo.mutation.PkgLength(); ok {
		_spec.SetField(item.FieldPkgLength, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedPkgLength(); ok {
		_spec.AddField(item.FieldPkgLength, field.TypeFloat64, value)
	}
	if iuo.mutation.PkgLengthCleared() {
		_spec.ClearField(item.FieldPkgLength, field.TypeFloat64)
	}
	if value, ok := iuo.mutation.PkgWeight(); ok {
		_spec.SetField(item.FieldPkgWeight, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedPkgWeight(); ok {
		_spec.AddField(item.FieldPkgWeight, field.TypeFloat64, value)
	}
	if iuo.mutation.PkgWeightCleared() {
		_spec.ClearField(item.FieldPkgWeight, field.TypeFloat64)
	}
	if value, ok := iuo.mutation.ShortDesc(); ok {
		_spec.SetField(item.FieldShortDesc, field.TypeString, value)
	}
	if iuo.mutation.ShortDescCleared() {
		_spec.ClearField(item.FieldShortDesc, field.TypeString)
	}
	if value, ok := iuo.mutation.Descr(); ok {
		_spec.SetField(item.FieldDescr, field.TypeString, value)
	}
	if iuo.mutation.DescrCleared() {
		_spec.ClearField(item.FieldDescr, field.TypeString)
	}
	if value, ok := iuo.mutation.ImageUrl1(); ok {
		_spec.SetField(item.FieldImageUrl1, field.TypeString, value)
	}
	if iuo.mutation.ImageUrl1Cleared() {
		_spec.ClearField(item.FieldImageUrl1, field.TypeString)
	}
	if value, ok := iuo.mutation.ImageUrl2(); ok {
		_spec.SetField(item.FieldImageUrl2, field.TypeString, value)
	}
	if iuo.mutation.ImageUrl2Cleared() {
		_spec.ClearField(item.FieldImageUrl2, field.TypeString)
	}
	if value, ok := iuo.mutation.ImageUrl3(); ok {
		_spec.SetField(item.FieldImageUrl3, field.TypeString, value)
	}
	if iuo.mutation.ImageUrl3Cleared() {
		_spec.ClearField(item.FieldImageUrl3, field.TypeString)
	}
	if value, ok := iuo.mutation.ImageUrl4(); ok {
		_spec.SetField(item.FieldImageUrl4, field.TypeString, value)
	}
	if iuo.mutation.ImageUrl4Cleared() {
		_spec.ClearField(item.FieldImageUrl4, field.TypeString)
	}
	if value, ok := iuo.mutation.ImageUrl5(); ok {
		_spec.SetField(item.FieldImageUrl5, field.TypeString, value)
	}
	if iuo.mutation.ImageUrl5Cleared() {
		_spec.ClearField(item.FieldImageUrl5, field.TypeString)
	}
	if value, ok := iuo.mutation.Condition(); ok {
		_spec.SetField(item.FieldCondition, field.TypeString, value)
	}
	if iuo.mutation.ConditionCleared() {
		_spec.ClearField(item.FieldCondition, field.TypeString)
	}
	if value, ok := iuo.mutation.Brand(); ok {
		_spec.SetField(item.FieldBrand, field.TypeString, value)
	}
	if iuo.mutation.BrandCleared() {
		_spec.ClearField(item.FieldBrand, field.TypeString)
	}
	if value, ok := iuo.mutation.Gender(); ok {
		_spec.SetField(item.FieldGender, field.TypeString, value)
	}
	if iuo.mutation.GenderCleared() {
		_spec.ClearField(item.FieldGender, field.TypeString)
	}
	if value, ok := iuo.mutation.AgeGroup(); ok {
		_spec.SetField(item.FieldAgeGroup, field.TypeString, value)
	}
	if iuo.mutation.AgeGroupCleared() {
		_spec.ClearField(item.FieldAgeGroup, field.TypeString)
	}
	if value, ok := iuo.mutation.Color(); ok {
		_spec.SetField(item.FieldColor, field.TypeString, value)
	}
	if iuo.mutation.ColorCleared() {
		_spec.ClearField(item.FieldColor, field.TypeString)
	}
	if value, ok := iuo.mutation.Size(); ok {
		_spec.SetField(item.FieldSize, field.TypeString, value)
	}
	if iuo.mutation.SizeCleared() {
		_spec.ClearField(item.FieldSize, field.TypeString)
	}
	if value, ok := iuo.mutation.UxmItemIDNum(); ok {
		_spec.SetField(item.FieldUxmItemIDNum, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.AddedUxmItemIDNum(); ok {
		_spec.AddField(item.FieldUxmItemIDNum, field.TypeInt64, value)
	}
	if iuo.mutation.UxmItemIDNumCleared() {
		_spec.ClearField(item.FieldUxmItemIDNum, field.TypeInt64)
	}
	if value, ok := iuo.mutation.Sent(); ok {
		_spec.SetField(item.FieldSent, field.TypeBool, value)
	}
	if iuo.mutation.SentCleared() {
		_spec.ClearField(item.FieldSent, field.TypeBool)
	}
	if value, ok := iuo.mutation.SentAt(); ok {
		_spec.SetField(item.FieldSentAt, field.TypeTime, value)
	}
	if iuo.mutation.SentAtCleared() {
		_spec.ClearField(item.FieldSentAt, field.TypeTime)
	}
	if value, ok := iuo.mutation.HasError(); ok {
		_spec.SetField(item.FieldHasError, field.TypeBool, value)
	}
	if iuo.mutation.HasErrorCleared() {
		_spec.ClearField(item.FieldHasError, field.TypeBool)
	}
	if value, ok := iuo.mutation.LastLogID(); ok {
		_spec.SetField(item.FieldLastLogID, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.AddedLastLogID(); ok {
		_spec.AddField(item.FieldLastLogID, field.TypeInt64, value)
	}
	if iuo.mutation.LastLogIDCleared() {
		_spec.ClearField(item.FieldLastLogID, field.TypeInt64)
	}
	if value, ok := iuo.mutation.FeedResponse(); ok {
		_spec.SetField(item.FieldFeedResponse, field.TypeString, value)
	}
	if iuo.mutation.FeedResponseCleared() {
		_spec.ClearField(item.FieldFeedResponse, field.TypeString)
	}
	if value, ok := iuo.mutation.Keywords(); ok {
		_spec.SetField(item.FieldKeywords, field.TypeString, value)
	}
	if iuo.mutation.KeywordsCleared() {
		_spec.ClearField(item.FieldKeywords, field.TypeString)
	}
	if value, ok := iuo.mutation.Sync(); ok {
		_spec.SetField(item.FieldSync, field.TypeBool, value)
	}
	if iuo.mutation.SyncCleared() {
		_spec.ClearField(item.FieldSync, field.TypeBool)
	}
	if value, ok := iuo.mutation.UserID(); ok {
		_spec.SetField(item.FieldUserID, field.TypeString, value)
	}
	if iuo.mutation.UserIDCleared() {
		_spec.ClearField(item.FieldUserID, field.TypeString)
	}
	if value, ok := iuo.mutation.ShippingProfileID(); ok {
		_spec.SetField(item.FieldShippingProfileID, field.TypeString, value)
	}
	if iuo.mutation.ShippingProfileIDCleared() {
		_spec.ClearField(item.FieldShippingProfileID, field.TypeString)
	}
	if value, ok := iuo.mutation.OptimizationID(); ok {
		_spec.SetField(item.FieldOptimizationID, field.TypeString, value)
	}
	if iuo.mutation.OptimizationIDCleared() {
		_spec.ClearField(item.FieldOptimizationID, field.TypeString)
	}
	if value, ok := iuo.mutation.UxmItemID(); ok {
		_spec.SetField(item.FieldUxmItemID, field.TypeString, value)
	}
	if iuo.mutation.UxmItemIDCleared() {
		_spec.ClearField(item.FieldUxmItemID, field.TypeString)
	}
	if value, ok := iuo.mutation.ParentID(); ok {
		_spec.SetField(item.FieldParentID, field.TypeString, value)
	}
	if iuo.mutation.ParentIDCleared() {
		_spec.ClearField(item.FieldParentID, field.TypeString)
	}
	if value, ok := iuo.mutation.ItemTypeID(); ok {
		_spec.SetField(item.FieldItemTypeID, field.TypeString, value)
	}
	if iuo.mutation.ItemTypeIDCleared() {
		_spec.ClearField(item.FieldItemTypeID, field.TypeString)
	}
	if value, ok := iuo.mutation.UID(); ok {
		_spec.SetField(item.FieldUID, field.TypeString, value)
	}
	if value, ok := iuo.mutation.IsParent(); ok {
		_spec.SetField(item.FieldIsParent, field.TypeBool, value)
	}
	if iuo.mutation.IsParentCleared() {
		_spec.ClearField(item.FieldIsParent, field.TypeBool)
	}
	_node = &Item{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{item.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
