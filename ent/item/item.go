// Code generated by ent, DO NOT EDIT.

package item

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the item type in the database.
	Label = "item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTxTypeID holds the string denoting the tx_type_id field in the database.
	FieldTxTypeID = "tx_type_id"
	// FieldSku holds the string denoting the sku field in the database.
	FieldSku = "sku"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldSubTitle holds the string denoting the sub_title field in the database.
	FieldSubTitle = "sub_title"
	// FieldStatusID holds the string denoting the status_id field in the database.
	FieldStatusID = "status_id"
	// FieldNoIndex holds the string denoting the no_index field in the database.
	FieldNoIndex = "no_index"
	// FieldItemCategoryID holds the string denoting the item_category_id field in the database.
	FieldItemCategoryID = "item_category_id"
	// FieldBaseOnSalePrice holds the string denoting the base_on_sale_price field in the database.
	FieldBaseOnSalePrice = "base_on_sale_price"
	// FieldRetailPrice holds the string denoting the retail_price field in the database.
	FieldRetailPrice = "retail_price"
	// FieldSalePrice holds the string denoting the sale_price field in the database.
	FieldSalePrice = "sale_price"
	// FieldShippingProfileIDNum holds the string denoting the shipping_profile_id_num field in the database.
	FieldShippingProfileIDNum = "shipping_profile_id_num"
	// FieldOptimizationIDNum holds the string denoting the optimization_id_num field in the database.
	FieldOptimizationIDNum = "optimization_id_num"
	// FieldQty holds the string denoting the qty field in the database.
	FieldQty = "qty"
	// FieldMaximumOrderQty holds the string denoting the maximum_order_qty field in the database.
	FieldMaximumOrderQty = "maximum_order_qty"
	// FieldPkgWidth holds the string denoting the pkg_width field in the database.
	FieldPkgWidth = "pkg_width"
	// FieldPkgHeight holds the string denoting the pkg_height field in the database.
	FieldPkgHeight = "pkg_height"
	// FieldPkgLength holds the string denoting the pkg_length field in the database.
	FieldPkgLength = "pkg_length"
	// FieldPkgWeight holds the string denoting the pkg_weight field in the database.
	FieldPkgWeight = "pkg_weight"
	// FieldShortDesc holds the string denoting the short_desc field in the database.
	FieldShortDesc = "short_desc"
	// FieldDescr holds the string denoting the descr field in the database.
	FieldDescr = "descr"
	// FieldImageUrl1 holds the string denoting the image_url1 field in the database.
	FieldImageUrl1 = "image_url1"
	// FieldImageUrl2 holds the string denoting the image_url2 field in the database.
	FieldImageUrl2 = "image_url2"
	// FieldImageUrl3 holds the string denoting the image_url3 field in the database.
	FieldImageUrl3 = "image_url3"
	// FieldImageUrl4 holds the string denoting the image_url4 field in the database.
	FieldImageUrl4 = "image_url4"
	// FieldImageUrl5 holds the string denoting the image_url5 field in the database.
	FieldImageUrl5 = "image_url5"
	// FieldCondition holds the string denoting the condition field in the database.
	FieldCondition = "condition"
	// FieldBrand holds the string denoting the brand field in the database.
	FieldBrand = "brand"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldAgeGroup holds the string denoting the age_group field in the database.
	FieldAgeGroup = "age_group"
	// FieldColor holds the string denoting the color field in the database.
	FieldColor = "color"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldUxmItemIDNum holds the string denoting the uxm_item_id_num field in the database.
	FieldUxmItemIDNum = "uxm_item_id_num"
	// FieldSent holds the string denoting the sent field in the database.
	FieldSent = "sent"
	// FieldSentAt holds the string denoting the sent_at field in the database.
	FieldSentAt = "sent_at"
	// FieldHasError holds the string denoting the has_error field in the database.
	FieldHasError = "has_error"
	// FieldLastLogID holds the string denoting the last_log_id field in the database.
	FieldLastLogID = "last_log_id"
	// FieldFeedResponse holds the string denoting the feed_response field in the database.
	FieldFeedResponse = "feed_response"
	// FieldKeywords holds the string denoting the keywords field in the database.
	FieldKeywords = "keywords"
	// FieldSync holds the string denoting the sync field in the database.
	FieldSync = "sync"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldShippingProfileID holds the string denoting the shipping_profile_id field in the database.
	FieldShippingProfileID = "shipping_profile_id"
	// FieldOptimizationID holds the string denoting the optimization_id field in the database.
	FieldOptimizationID = "optimization_id"
	// FieldUxmItemID holds the string denoting the uxm_item_id field in the database.
	FieldUxmItemID = "uxm_item_id"
	// FieldParentID holds the string denoting the parent_id field in the database.
	FieldParentID = "parent_id"
	// FieldItemTypeID holds the string denoting the item_type_id field in the database.
	FieldItemTypeID = "item_type_id"
	// FieldUID holds the string denoting the uid field in the database.
	FieldUID = "uid"
	// FieldIsParent holds the string denoting the is_parent field in the database.
	FieldIsParent = "is_parent"
	// Table holds the table name of the item in the database.
	Table = "items"
)

// Columns holds all SQL columns for item fields.
var Columns = []string{
	FieldID,
	FieldTxTypeID,
	FieldSku,
	FieldTitle,
	FieldSubTitle,
	FieldStatusID,
	FieldNoIndex,
	FieldItemCategoryID,
	FieldBaseOnSalePrice,
	FieldRetailPrice,
	FieldSalePrice,
	FieldShippingProfileIDNum,
	FieldOptimizationIDNum,
	FieldQty,
	FieldMaximumOrderQty,
	FieldPkgWidth,
	FieldPkgHeight,
	FieldPkgLength,
	FieldPkgWeight,
	FieldShortDesc,
	FieldDescr,
	FieldImageUrl1,
	FieldImageUrl2,
	FieldImageUrl3,
	FieldImageUrl4,
	FieldImageUrl5,
	FieldCondition,
	FieldBrand,
	FieldGender,
	FieldAgeGroup,
	FieldColor,
	FieldSize,
	FieldUxmItemIDNum,
	FieldSent,
	FieldSentAt,
	FieldHasError,
	FieldLastLogID,
	FieldFeedResponse,
	FieldKeywords,
	FieldSync,
	FieldUserID,
	FieldShippingProfileID,
	FieldOptimizationID,
	FieldUxmItemID,
	FieldParentID,
	FieldItemTypeID,
	FieldUID,
	FieldIsParent,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Item queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTxTypeID orders the results by the tx_type_id field.
func ByTxTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTxTypeID, opts...).ToFunc()
}

// BySku orders the results by the sku field.
func BySku(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSku, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// BySubTitle orders the results by the sub_title field.
func BySubTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubTitle, opts...).ToFunc()
}

// ByStatusID orders the results by the status_id field.
func ByStatusID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatusID, opts...).ToFunc()
}

// ByNoIndex orders the results by the no_index field.
func ByNoIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNoIndex, opts...).ToFunc()
}

// ByItemCategoryID orders the results by the item_category_id field.
func ByItemCategoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldItemCategoryID, opts...).ToFunc()
}

// ByBaseOnSalePrice orders the results by the base_on_sale_price field.
func ByBaseOnSalePrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBaseOnSalePrice, opts...).ToFunc()
}

// ByRetailPrice orders the results by the retail_price field.
func ByRetailPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRetailPrice, opts...).ToFunc()
}

// BySalePrice orders the results by the sale_price field.
func BySalePrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSalePrice, opts...).ToFunc()
}

// ByShippingProfileIDNum orders the results by the shipping_profile_id_num field.
func ByShippingProfileIDNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShippingProfileIDNum, opts...).ToFunc()
}

// ByOptimizationIDNum orders the results by the optimization_id_num field.
func ByOptimizationIDNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOptimizationIDNum, opts...).ToFunc()
}

// ByQty orders the results by the qty field.
func ByQty(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQty, opts...).ToFunc()
}

// ByMaximumOrderQty orders the results by the maximum_order_qty field.
func ByMaximumOrderQty(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaximumOrderQty, opts...).ToFunc()
}

// ByPkgWidth orders the results by the pkg_width field.
func ByPkgWidth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPkgWidth, opts...).ToFunc()
}

// ByPkgHeight orders the results by the pkg_height field.
func ByPkgHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPkgHeight, opts...).ToFunc()
}

// ByPkgLength orders the results by the pkg_length field.
func ByPkgLength(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPkgLength, opts...).ToFunc()
}

// ByPkgWeight orders the results by the pkg_weight field.
func ByPkgWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPkgWeight, opts...).ToFunc()
}

// ByShortDesc orders the results by the short_desc field.
func ByShortDesc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShortDesc, opts...).ToFunc()
}

// ByDescr orders the results by the descr field.
func ByDescr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescr, opts...).ToFunc()
}

// ByImageUrl1 orders the results by the image_url1 field.
func ByImageUrl1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageUrl1, opts...).ToFunc()
}

// ByImageUrl2 orders the results by the image_url2 field.
func ByImageUrl2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageUrl2, opts...).ToFunc()
}

// ByImageUrl3 orders the results by the image_url3 field.
func ByImageUrl3(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageUrl3, opts...).ToFunc()
}

// ByImageUrl4 orders the results by the image_url4 field.
func ByImageUrl4(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageUrl4, opts...).ToFunc()
}

// ByImageUrl5 orders the results by the image_url5 field.
func ByImageUrl5(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageUrl5, opts...).ToFunc()
}

// ByCondition orders the results by the condition field.
func ByCondition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCondition, opts...).ToFunc()
}

// ByBrand orders the results by the brand field.
func ByBrand(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrand, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByAgeGroup orders the results by the age_group field.
func ByAgeGroup(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgeGroup, opts...).ToFunc()
}

// ByColor orders the results by the color field.
func ByColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColor, opts...).ToFunc()
}

// BySize orders the results by the size field.
func BySize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSize, opts...).ToFunc()
}

// ByUxmItemIDNum orders the results by the uxm_item_id_num field.
func ByUxmItemIDNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUxmItemIDNum, opts...).ToFunc()
}

// BySent orders the results by the sent field.
func BySent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSent, opts...).ToFunc()
}

// BySentAt orders the results by the sent_at field.
func BySentAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSentAt, opts...).ToFunc()
}

// ByHasError orders the results by the has_error field.
func ByHasError(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasError, opts...).ToFunc()
}

// ByLastLogID orders the results by the last_log_id field.
func ByLastLogID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLogID, opts...).ToFunc()
}

// ByFeedResponse orders the results by the feed_response field.
func ByFeedResponse(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeedResponse, opts...).ToFunc()
}

// ByKeywords orders the results by the keywords field.
func ByKeywords(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeywords, opts...).ToFunc()
}

// BySync orders the results by the sync field.
func BySync(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSync, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByShippingProfileID orders the results by the shipping_profile_id field.
func ByShippingProfileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShippingProfileID, opts...).ToFunc()
}

// ByOptimizationID orders the results by the optimization_id field.
func ByOptimizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOptimizationID, opts...).ToFunc()
}

// ByUxmItemID orders the results by the uxm_item_id field.
func ByUxmItemID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUxmItemID, opts...).ToFunc()
}

// ByParentID orders the results by the parent_id field.
func ByParentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentID, opts...).ToFunc()
}

// ByItemTypeID orders the results by the item_type_id field.
func ByItemTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldItemTypeID, opts...).ToFunc()
}

// ByUID orders the results by the uid field.
func ByUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUID, opts...).ToFunc()
}

// ByIsParent orders the results by the is_parent field.
func ByIsParent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsParent, opts...).ToFunc()
}
